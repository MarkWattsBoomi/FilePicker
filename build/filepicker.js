(()=>{var e={341:()=>{},877:()=>{},580:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=t.DialogBox=void 0;var u=s(n(804));n(341);var d=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new h,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return o(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,i=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=t-i,this.top=n-o,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,i){return l(this,void 0,void 0,(function(){return c(this,(function(o){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=i||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=u.createElement("div",null);else{for(var n=[],i=function(e){n.push(u.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},o=0,a=this.dialogButtons;o<a.length;o++)i(a[o]);e=u.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},u.createElement("div",{className:"modal-content",ref:function(e){t.setDialog(e)}},u.createElement("div",{className:"modal-dialog"},u.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},u.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},u.createElement("span",{className:"modal-dialog-header-title"},this.dialogTitle)),u.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},u.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",title:"Close",onMouseDown:function(e){e.stopPropagation(),t.dialogOnClose()}}))),u.createElement("div",{className:"modal-dialog-body"},u.createElement("div",{className:"modal-dialog-body-client"},this.dialogContent)),u.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=h.start(p.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===p.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===p.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(u.Component);t.DialogBox=d;var p;t.modalDialogButton=function(e,t){this.label=e,this.handler=t},function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(p=t.eDragEventType||(t.eDragEventType={}));var h=function(){function e(){this.type=p.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,i,o){var a=new e;return a.type=t,a.sourceElement=n,a.targetElement=null,a.mouseX=i,a.mouseY=o,a.mouseOffsetX=i,a.mouseOffsetY=o,a},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=p.unknown},e}();t.DragEvent=h},351:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.initializedListeners={},manywho.eventManager.joinListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in e&&window.hasOwnProperty("culture")&&culture.length>0&&e.setRequestHeader("Culture",culture),manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.join=function(e,t){for(var n in manywho.eventManager.joinListeners)manywho.eventManager.joinListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.initialized=function(e,t){for(var n in manywho.eventManager.initializedListeners)manywho.eventManager.initializedListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addInitializedListener=function(e,t){manywho.eventManager.initializedListeners[t]=e},manywho.eventManager.removeInitializedListener=function(e){delete manywho.eventManager.initializedListeners[e]},manywho.eventManager.addJoinListener=function(e,t){manywho.eventManager.joinListeners[t]=e},manywho.eventManager.removeJoinListener=function(e){delete manywho.eventManager.joinListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail},initialization:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.initialized,fail:manywho.eventManager.fail},join:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.join,fail:manywho.eventManager.fail}}))},687:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(804));n(877),n(351);var d=n(580),p=function(e){function t(t){var n,i,o,a=e.call(this,t)||this;a.selectedItem=null,a.text="",a.lastContent=u.createElement("div",null),a.fileSelected=a.fileSelected.bind(a),a.fileReadAsDataURL=a.fileReadAsDataURL.bind(a),a.ResizeBase64Img=a.ResizeBase64Img.bind(a),a.clearFile=a.clearFile.bind(a),a.pickFile=a.pickFile.bind(a),a.chooseFile=a.chooseFile.bind(a),a.isImage=a.isImage.bind(a),a.rescaleImage=a.rescaleImage.bind(a),a.flowMoved=a.flowMoved.bind(a),a.chooseFile=a.chooseFile.bind(a);var r=manywho.model.getComponent(a.props.id,a.props.flowKey);return a.mode=(null===(n=r.attributes)||void 0===n?void 0:n.mode)||"default",a.fileTypes=(null===(o=null===(i=r.attributes)||void 0===i?void 0:i.allowed)||void 0===o?void 0:o.split(","))||["*"],a.state={imgData:void 0,file:void 0},a}return o(t,e),t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){return c(this,(function(t){return"FORWARD"===e.invokeType||e.invokeType,[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.preserveState()];case 1:return e.sent(),[4,this.clearFile(!0)];case 2:return e.sent(),this.forceUpdate(),[2]}}))}))},t.prototype.preserveState=function(){return l(this,void 0,void 0,(function(){var e,t;return c(this,(function(n){return e=manywho.model.getComponent(this.props.id,this.props.flowKey),t={},"ContentString"===e.contentType?t.contentValue=e.contentValue:t.objectData=e.objectData,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),[2]}))}))},t.prototype.componentWillUnmount=function(){},t.prototype.rescaleImage=function(e){this.img.width>=this.img.height?(this.img.style.width="100%",this.img.style.height="auto"):(this.img.style.width="auto",this.img.style.height="100%")},t.prototype.clearFile=function(e){var t,n,i,o,a,r;return void 0===e&&(e=!0),l(this,void 0,void 0,(function(){var s,l,u,d,p;return c(this,(function(c){switch(c.label){case 0:return console.log("clear file"),this.setState({imgData:void 0,file:void 0}),"ContentString"===(s=manywho.model.getComponent(this.props.id,this.props.flowKey)).contentType?manywho.state.setComponent(this.props.id,{contentValue:""},this.props.flowKey,!0):(l=manywho.state.getComponent(this.props.id,this.props.flowKey),u=void 0,(u=l.objectData&&l.objectData instanceof Array?l.objectData[0]:l.objectData)||(u=s.objectData&&s.objectData instanceof Array?s.objectData[0]:s.objectData),u&&(manywho.utils.setObjectDataProperty(u.properties,null===(t=s.attributes)||void 0===t?void 0:t.fileNameField,""),manywho.utils.setObjectDataProperty(u.properties,null===(n=s.attributes)||void 0===n?void 0:n.extensionField,""),manywho.utils.setObjectDataProperty(u.properties,null===(i=s.attributes)||void 0===i?void 0:i.mimeTypeField,""),manywho.utils.setObjectDataProperty(u.properties,null===(o=s.attributes)||void 0===o?void 0:o.sizeField,""),manywho.utils.setObjectDataProperty(u.properties,null===(a=s.attributes)||void 0===a?void 0:a.dataField,""),u.isSelected=!1),manywho.state.setComponent(this.props.id,{objectData:[u]},this.props.flowKey,!0)),(null===(r=s.attributes)||void 0===r?void 0:r.onCleared)&&s.attributes.onCleared.length>0?(d=manywho.model.getOutcomes(this.props.id,this.props.flowKey),(p=d.find((function(e){return e.developerName===s.attributes.onCleared})))?[4,manywho.component.onOutcome(p,null,this.props.flowKey)]:[3,2]):[3,4];case 1:return c.sent(),[3,3];case 2:!0===e&&manywho.component.handleEvent(this,s,this.props.flowKey),c.label=3;case 3:return[3,5];case 4:!0===e&&manywho.component.handleEvent(this,s,this.props.flowKey),c.label=5;case 5:return[2]}}))}))},t.prototype.pickFile=function(){this.fileInput.value="",this.fileInput.click()},t.prototype.isImage=function(e){switch(e){case"image/jpg":case"image/jpeg":case"image/bmp":case"image/gif":case"image/giff":case"image/png":case"image/webp":return!0;default:return!1}},t.prototype.chooseFile=function(e){var t;return l(this,void 0,void 0,(function(){var e,n,i,o,a,r;return c(this,(function(s){switch(s.label){case 0:e={types:[],excludeAcceptAllOption:!0,multiple:!1},n=manywho.model.getComponent(this.props.id,this.props.flowKey),((null===(t=n.attributes)||void 0===t?void 0:t.extensions)||"*").split(",").forEach((function(t){switch(t=t.trim().toLowerCase()){case"*":e.excludeAcceptAllOption=!1;break;case"csv":e.types.push({description:"CSV Files",accept:{"text/csv":[".csv"]}});break;case"xlsx":e.types.push({description:"Excel Files",accept:{"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":[".xlsz"]}})}})),s.label=1;case 1:return s.trys.push([1,6,7,9]),[4,window.showOpenFilePicker(e)];case 2:return"file"!==(i=s.sent())[0].kind?[3,5]:[4,i[0].getFile()];case 3:return o=s.sent(),[4,this.fileReadAsDataURL(o)];case 4:a=s.sent(),this.setState({file:o,imageData:a}),s.label=5;case 5:return[3,9];case 6:return r=s.sent(),console.log(r),[3,9];case 7:return console.log("done"),[4,this.fileChosen()];case 8:return s.sent(),[7];case 9:return[2]}}))}))},t.prototype.fileChosen=function(){var e,t,n,i,o,a,r,s,p,h,f,m,v;return l(this,void 0,void 0,(function(){var l,y,g,b,w,D,j,M,O,x,C,E,k;return c(this,(function(c){switch(c.label){case 0:return(null===(t=null===(e=this.state.file)||void 0===e?void 0:e.name)||void 0===t?void 0:t.length)>0?(l=manywho.model.getComponent(this.props.id,this.props.flowKey),y=this.state.file.name.lastIndexOf(".")>=0?this.state.file.name.substring(0,this.state.file.name.lastIndexOf(".")):this.state.file.name,g=this.state.file.name.lastIndexOf(".")>=0?this.state.file.name.substring(this.state.file.name.lastIndexOf(".")+1).toLowerCase():"",b=this.state.file.type,w=this.state.file.size,D=this.state.imageData,(j=parseInt(l.attributes.maxSizeKB||0))>0&&w>1e3*j?(this.messageBox.showDialog("File Too Large",u.createElement("span",null,"The file you have chosen is ",w," bytes long and exceeds the maximum file size of ",j),[new d.modalDialogButton("Ok",this.messageBox.hideDialog)]),[3,8]):[3,1]):[3,8];case 1:return this.isImage(b)?(M=0,parseInt(l.attributes.imageSize||"0")>0&&(M=parseInt(l.attributes.imageSize)),M>0?[4,this.ResizeBase64Img(D,M)]:[3,3]):[3,3];case 2:D=c.sent(),c.label=3;case 3:return"ContentString"===l.contentType?manywho.state.setComponent(this.props.id,{contentValue:D},this.props.flowKey,!0):(O=manywho.state.getComponent(this.props.id,this.props.flowKey),x=void 0,(x=O.objectData&&O.objectData instanceof Array?O.objectData[0]:O.objectData)||(x=l.objectData&&l.objectData instanceof Array?l.objectData[0]:l.objectData),x&&(x.properties,(null===(n=l.attributes)||void 0===n?void 0:n.fileNameField)&&manywho.utils.setObjectDataProperty(x.properties,null===(i=l.attributes)||void 0===i?void 0:i.fileNameField,y),x.properties,(null===(o=l.attributes)||void 0===o?void 0:o.extensionField)&&manywho.utils.setObjectDataProperty(x.properties,null===(a=l.attributes)||void 0===a?void 0:a.extensionField,g),x.properties,(null===(r=l.attributes)||void 0===r?void 0:r.mimeTypeField)&&manywho.utils.setObjectDataProperty(x.properties,null===(s=l.attributes)||void 0===s?void 0:s.mimeTypeField,b),x.properties,(null===(p=l.attributes)||void 0===p?void 0:p.sizeField)&&manywho.utils.setObjectDataProperty(x.properties,null===(h=l.attributes)||void 0===h?void 0:h.sizeField,w),x.properties,(null===(f=l.attributes)||void 0===f?void 0:f.dataField)&&manywho.utils.setObjectDataProperty(x.properties,null===(m=l.attributes)||void 0===m?void 0:m.dataField,D)),manywho.state.setComponent(this.props.id,{objectData:[x]},this.props.flowKey,!0)),(null===(v=l.attributes)||void 0===v?void 0:v.onSelected)&&l.attributes.onSelected.length>0?(C=l.attributes.onSelected,E=manywho.model.getOutcomes(this.props.id,this.props.flowKey),(k=E.find((function(e){return e.developerName===C})))?[4,manywho.component.onOutcome(k,null,this.props.flowKey)]:[3,5]):[3,7];case 4:return c.sent(),[3,6];case 5:manywho.component.handleEvent(this,l,this.props.flowKey),c.label=6;case 6:return[3,8];case 7:manywho.component.handleEvent(this,l,this.props.flowKey),c.label=8;case 8:return[2]}}))}))},t.prototype.fileSelected=function(e){var t,n,i,o,a,r,s,p,h,f,m;return l(this,void 0,void 0,(function(){var e,l,v,y,g,b,w,D,j,M,O,x,C,E;return c(this,(function(c){switch(c.label){case 0:return this.fileInput.value.length>0?(e=manywho.model.getComponent(this.props.id,this.props.flowKey),l=this.fileInput.files[0],[4,this.fileReadAsDataURL(l)]):[3,10];case 1:return v=c.sent(),y=l.name.lastIndexOf(".")>=0?l.name.substring(0,l.name.lastIndexOf(".")):l.name,g=l.name.lastIndexOf(".")>=0?l.name.substring(l.name.lastIndexOf(".")+1).toLowerCase():"",b=l.type,w=l.size,(D=parseInt(e.attributes.maxSizeKB||0))>0&&w>1e3*D?(this.messageBox.showDialog("File Too Large",u.createElement("span",null,"The file you have chosen is ",w," bytes long and exceeds the maximum file size of ",D),[new d.modalDialogButton("Ok",this.messageBox.hideDialog)]),[3,9]):[3,2];case 2:return this.isImage(b)?(j=0,parseInt(e.attributes.imageSize||"0")>0&&(j=parseInt(e.attributes.imageSize)),j>0?[4,this.ResizeBase64Img(v,j)]:[3,4]):[3,4];case 3:v=c.sent(),c.label=4;case 4:return"ContentString"===e.contentType?manywho.state.setComponent(this.props.id,{contentValue:v},this.props.flowKey,!0):(M=manywho.state.getComponent(this.props.id,this.props.flowKey),O=void 0,(O=M.objectData&&M.objectData instanceof Array?M.objectData[0]:M.objectData)||(O=e.objectData&&e.objectData instanceof Array?e.objectData[0]:e.objectData),O&&(O.properties,(null===(t=e.attributes)||void 0===t?void 0:t.fileNameField)&&manywho.utils.setObjectDataProperty(O.properties,null===(n=e.attributes)||void 0===n?void 0:n.fileNameField,y),O.properties,(null===(i=e.attributes)||void 0===i?void 0:i.extensionField)&&manywho.utils.setObjectDataProperty(O.properties,null===(o=e.attributes)||void 0===o?void 0:o.extensionField,g),O.properties,(null===(a=e.attributes)||void 0===a?void 0:a.mimeTypeField)&&manywho.utils.setObjectDataProperty(O.properties,null===(r=e.attributes)||void 0===r?void 0:r.mimeTypeField,b),O.properties,(null===(s=e.attributes)||void 0===s?void 0:s.sizeField)&&manywho.utils.setObjectDataProperty(O.properties,null===(p=e.attributes)||void 0===p?void 0:p.sizeField,w),O.properties,(null===(h=e.attributes)||void 0===h?void 0:h.dataField)&&manywho.utils.setObjectDataProperty(O.properties,null===(f=e.attributes)||void 0===f?void 0:f.dataField,v)),manywho.state.setComponent(this.props.id,{objectData:[O]},this.props.flowKey,!0)),(null===(m=e.attributes)||void 0===m?void 0:m.onSelected)&&e.attributes.onSelected.length>0?(x=e.attributes.onSelected,C=manywho.model.getOutcomes(this.props.id,this.props.flowKey),(E=C.find((function(e){return e.developerName===x})))?[4,manywho.component.onOutcome(E,null,this.props.flowKey)]:[3,6]):[3,8];case 5:return c.sent(),[3,7];case 6:manywho.component.handleEvent(this,e,this.props.flowKey),c.label=7;case 7:return[3,9];case 8:manywho.component.handleEvent(this,e,this.props.flowKey),c.label=9;case 9:return[3,11];case 10:this.clearFile(!0),c.label=11;case 11:return[2]}}))}))},t.prototype.fileReadAsDataURL=function(e){return l(this,void 0,void 0,(function(){var t;return c(this,(function(n){return t=new FileReader,[2,new Promise((function(n,i){t.onerror=function(){t.abort(),i(new DOMException("Problem reading file"))},t.onload=function(){n(t.result)},t.readAsDataURL(e)}))]}))}))},t.prototype.ResizeBase64Img=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(i){return n=new Image,[2,new Promise((function(i,o){n.onload=function(){var e=n.height/n.width,o=document.createElement("canvas");o.width=t,o.height=t*e;var a=o.getContext("2d");n.width,a.scale(o.width/n.width,o.height/n.height),a.drawImage(n,0,0);var r=o.toDataURL();i(r)},n.onerror=function(){o(new DOMException("Problem loading image file"))},n.src=e}))]}))}))},t.prototype.render=function(){switch(manywho.model.getComponent(this.props.id,this.props.flowKey),this.mode){case"default":return this.defaultRender();case"basic":return this.basicRender()}},t.prototype.basicRender=function(){var e,t=this,n="";this.fileTypes.forEach((function(e){n.length>0&&(n+=","),e.startsWith(".")||(n+="."),n+=e}));var i,o={},a=manywho.model.getComponent(this.props.id,this.props.flowKey);return!1===a.isVisible&&(o.display="none"),a.width&&(o.width=a.width+"px"),a.height&&(o.height=a.height+"px"),this.state.file&&(i=u.createElement("span",{className:"glyphicon glyphicon-remove-circle file-picker-clear",onClick:function(e){t.clearFile(!0)},title:"Clear file selection"})),u.createElement("div",{style:o,id:this.props.id},u.createElement("span",{onClick:this.chooseFile,className:"file-picker-button"},"Choose file"),u.createElement("span",{className:"file-picker-filename"},null===(e=this.state.file)||void 0===e?void 0:e.name),i)},t.prototype.defaultRender=function(){var e,t,n,i,o,a,r,s=this,l=manywho.model.getComponent(this.props.id,this.props.flowKey),c=manywho.state.getComponent(this.props.id,this.props.flowKey),p="",h="",f=(null===(e=l.attributes)||void 0===e?void 0:e.title)||"Select File";"true"===(null===(n=null===(t=l.attributes)||void 0===t?void 0:t.transparent)||void 0===n?void 0:n.toLowerCase())?(p="file-picker-transparent "+(null===(i=l.attributes)||void 0===i?void 0:i.classes),h="file-picker-header-transparent ",f=""):(p="file-picker "+(null===(o=l.attributes)||void 0===o?void 0:o.classes),h="file-picker-header ");var m,v,y,g,b,w,D={width:"-webkit-fill-available",height:"-webkit-fill-available"};if(!1===l.isVisible&&(D.display="none"),l.width&&(D.width=l.width+"px"),l.height&&(D.height=l.height+"px"),m=this.pickFile,v=u.createElement("span",{className:"glyphicon glyphicon-remove file-picker-header-button",onClick:function(e){s.clearFile(!0)},title:"Clear selected file"}),"ContentString"===l.contentType)g=c.contentValue;else{var j=void 0;c&&c.objectData&&(j=c.objectData instanceof Array?c.objectData[0]:c.objectData),j||(j=l.objectData&&l.objectData instanceof Array?l.objectData[0]:l.objectData)&&manywho.state.setComponent(this.props.id,{objectData:[j]},this.props.flowKey,!0),j&&(b=null===(a=manywho.utils.getObjectDataProperty(j.properties,l.attributes.fileNameField))||void 0===a?void 0:a.contentValue,g=null===(r=manywho.utils.getObjectDataProperty(j.properties,l.attributes.dataField))||void 0===r?void 0:r.contentValue)}return g?(y=g.substring(g.indexOf(":")+1,g.indexOf(";")),w=this.isImage(y)?u.createElement("img",{style:{maxHeight:"100%",maxWidth:"100%",width:"auto",OObjectFit:"cover"},ref:function(e){s.img=e},className:"file-picker-image",src:g,onLoad:this.rescaleImage}):u.createElement("span",{className:"file-picker-file-name"},b)):w=u.createElement("div",{style:{display:"flex",flexDirection:"column",flexGrow:1}},u.createElement("div",{style:{margin:"auto",display:"flex",flexDirection:"column"}},u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"No file selected"),u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"Click to select a file"))),this.lastContent=u.createElement("div",{className:p,style:D},u.createElement(d.DialogBox,{ref:function(e){s.messageBox=e}}),u.createElement("div",{className:h},u.createElement("div",{className:"file-picker-header-left"},u.createElement("span",{className:"file-picker-header-title"},f)),u.createElement("div",{className:"file-picker-header-right"},v)),u.createElement("div",{className:"file-picker-body",onClick:m,ref:function(e){s.imgDiv=e}},w,u.createElement("input",{ref:function(e){s.fileInput=e},type:"file",className:"file-file",onChange:this.fileSelected}))),this.lastContent},t}(u.Component);t.default=p,manywho.component.register("FilePicker",p)},629:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(687),t)},804:e=>{"use strict";e.exports=React}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var a=t[i]={exports:{}};return e[i].call(a.exports,a,a.exports,n),a.exports}(629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,