(()=>{var e={341:()=>{},877:()=>{},580:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=t.DialogBox=void 0;var u=s(n(804));n(341);var d=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new p,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return o(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,i=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=t-i,this.top=n-o,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,i){return l(this,void 0,void 0,(function(){return c(this,(function(o){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=i||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=u.createElement("div",null);else{for(var n=[],i=function(e){n.push(u.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},o=0,a=this.dialogButtons;o<a.length;o++)i(a[o]);e=u.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},u.createElement("div",{className:"modal-content",ref:function(e){t.setDialog(e)}},u.createElement("div",{className:"modal-dialog"},u.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},u.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},u.createElement("span",{className:"modal-dialog-header-title"},this.dialogTitle)),u.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},u.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",title:"Close",onMouseDown:function(e){e.stopPropagation(),t.dialogOnClose()}}))),u.createElement("div",{className:"modal-dialog-body"},u.createElement("div",{className:"modal-dialog-body-client"},this.dialogContent)),u.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=p.start(h.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===h.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===h.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(u.Component);t.DialogBox=d;var h;t.modalDialogButton=function(e,t){this.label=e,this.handler=t},function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(h=t.eDragEventType||(t.eDragEventType={}));var p=function(){function e(){this.type=h.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,i,o){var a=new e;return a.type=t,a.sourceElement=n,a.targetElement=null,a.mouseX=i,a.mouseY=o,a.mouseOffsetX=i,a.mouseOffsetY=o,a},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=h.unknown},e}();t.DragEvent=p},351:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.initializedListeners={},manywho.eventManager.joinListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in e&&window.hasOwnProperty("culture")&&culture.length>0&&e.setRequestHeader("Culture",culture),manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.join=function(e,t){for(var n in manywho.eventManager.joinListeners)manywho.eventManager.joinListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.initialized=function(e,t){for(var n in manywho.eventManager.initializedListeners)manywho.eventManager.initializedListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addInitializedListener=function(e,t){manywho.eventManager.initializedListeners[t]=e},manywho.eventManager.removeInitializedListener=function(e){delete manywho.eventManager.initializedListeners[e]},manywho.eventManager.addJoinListener=function(e,t){manywho.eventManager.joinListeners[t]=e},manywho.eventManager.removeJoinListener=function(e){delete manywho.eventManager.joinListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail},initialization:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.initialized,fail:manywho.eventManager.fail},join:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.join,fail:manywho.eventManager.fail}}))},687:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(804));n(877),n(351);var d=n(580),h=function(e){function t(t){var n=e.call(this,t)||this;return n.selectedItem=null,n.text="",n.lastContent=u.createElement("div",null),n.fileSelected=n.fileSelected.bind(n),n.fileReadAsDataURL=n.fileReadAsDataURL.bind(n),n.ResizeBase64Img=n.ResizeBase64Img.bind(n),n.clearFile=n.clearFile.bind(n),n.pickFile=n.pickFile.bind(n),n.isImage=n.isImage.bind(n),n.rescaleImage=n.rescaleImage.bind(n),n.flowMoved=n.flowMoved.bind(n),n.state={imgData:void 0,fileName:void 0},n}return o(t,e),t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){return c(this,(function(t){return"FORWARD"===e.invokeType||e.invokeType,[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.preserveState()];case 1:return e.sent(),this.forceUpdate(),[2]}}))}))},t.prototype.preserveState=function(){return l(this,void 0,void 0,(function(){var e,t;return c(this,(function(n){return e=manywho.model.getComponent(this.props.id,this.props.flowKey),t={},"ContentString"===e.contentType?t.contentValue=e.contentValue:t.objectData=e.objectData,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),[2]}))}))},t.prototype.componentWillUnmount=function(){},t.prototype.rescaleImage=function(e){this.img.width>=this.img.height?(this.img.style.width="100%",this.img.style.height="auto"):(this.img.style.width="auto",this.img.style.height="100%")},t.prototype.componentWillReceiveProps=function(e){console.log("ping")},t.prototype.clearFile=function(){var e,t,n,i,o;return l(this,void 0,void 0,(function(){var a,r,s;return c(this,(function(l){return"ContentString"===(a=manywho.model.getComponent(this.props.id,this.props.flowKey)).contentType?manywho.state.setComponent(this.props.id,{contentValue:""},this.props.flowKey,!0):(r=manywho.state.getComponent(this.props.id,this.props.flowKey),s=void 0,(s=r.objectData&&r.objectData instanceof Array?r.objectData[0]:r.objectData)||(s=a.objectData&&a.objectData instanceof Array?a.objectData[0]:a.objectData),s&&(manywho.utils.setObjectDataProperty(s.properties,null===(e=a.attributes)||void 0===e?void 0:e.fileNameField,""),manywho.utils.setObjectDataProperty(s.properties,null===(t=a.attributes)||void 0===t?void 0:t.extensionField,""),manywho.utils.setObjectDataProperty(s.properties,null===(n=a.attributes)||void 0===n?void 0:n.mimeTypeField,""),manywho.utils.setObjectDataProperty(s.properties,null===(i=a.attributes)||void 0===i?void 0:i.sizeField,""),manywho.utils.setObjectDataProperty(s.properties,null===(o=a.attributes)||void 0===o?void 0:o.dataField,""),s.isSelected=!1),manywho.state.setComponent(this.props.id,{objectData:[s]},this.props.flowKey,!0)),manywho.component.handleEvent(this,a,this.props.flowKey),[2]}))}))},t.prototype.pickFile=function(){this.fileInput.value="",this.fileInput.click()},t.prototype.isImage=function(e){switch(e){case"image/jpg":case"image/jpeg":case"image/bmp":case"image/gif":case"image/giff":case"image/png":return!0;default:return!1}},t.prototype.fileSelected=function(e){var t,n,i,o,a,r;return l(this,void 0,void 0,(function(){var e,s,l,h,p,f,m,g,y,v,w,b,D;return c(this,(function(c){switch(c.label){case 0:return this.fileInput.files&&this.fileInput.files.length>0?(e=manywho.model.getComponent(this.props.id,this.props.flowKey),s=this.fileInput.files[0],[4,this.fileReadAsDataURL(s)]):[3,8];case 1:return l=c.sent(),h=s.name.lastIndexOf(".")>=0?s.name.substring(0,s.name.lastIndexOf(".")):s.name,p=s.name.lastIndexOf(".")>=0?s.name.substring(s.name.lastIndexOf(".")+1).toLowerCase():"",f=s.type,m=s.size,(g=parseInt(e.attributes.maxSizeKB||0))>0&&m>1e3*g?(this.messageBox.showDialog("File Too Large",u.createElement("span",null,"The file you have chosen is ",m," bytes long and exceeds the maximum file size of ",g),[new d.modalDialogButton("Ok",this.messageBox.hideDialog)]),[3,8]):[3,2];case 2:return this.isImage(f)?(y=0,parseInt(e.attributes.imageSize||"0")>0&&(y=parseInt(e.attributes.imageSize)),y>0?[4,this.ResizeBase64Img(l,y)]:[3,4]):[3,4];case 3:l=c.sent(),c.label=4;case 4:return"ContentString"===e.contentType?manywho.state.setComponent(this.props.id,{contentValue:l},this.props.flowKey,!0):(v=manywho.state.getComponent(this.props.id,this.props.flowKey),w=void 0,(w=v.objectData&&v.objectData instanceof Array?v.objectData[0]:v.objectData)||(w=e.objectData&&e.objectData instanceof Array?e.objectData[0]:e.objectData),w&&(manywho.utils.setObjectDataProperty(w.properties,null===(t=e.attributes)||void 0===t?void 0:t.fileNameField,h),manywho.utils.setObjectDataProperty(w.properties,null===(n=e.attributes)||void 0===n?void 0:n.extensionField,p),manywho.utils.setObjectDataProperty(w.properties,null===(i=e.attributes)||void 0===i?void 0:i.mimeTypeField,f),manywho.utils.setObjectDataProperty(w.properties,null===(o=e.attributes)||void 0===o?void 0:o.sizeField,m),manywho.utils.setObjectDataProperty(w.properties,null===(a=e.attributes)||void 0===a?void 0:a.dataField,l)),manywho.state.setComponent(this.props.id,{objectData:[w]},this.props.flowKey,!0)),(null===(r=e.attributes)||void 0===r?void 0:r.onSelected)&&e.attributes.onSelected.length>0?(b=manywho.model.getOutcomes(this.props.id,this.props.flowKey),(D=b.find((function(t){return t.value===e.attributes.onSelected})))?[4,manywho.component.onOutcome(D,null,this.props.flowKey)]:[3,6]):[3,7];case 5:c.sent(),c.label=6;case 6:return[3,8];case 7:manywho.component.handleEvent(this,e,this.props.flowKey),c.label=8;case 8:return[2]}}))}))},t.prototype.fileReadAsDataURL=function(e){return l(this,void 0,void 0,(function(){var t;return c(this,(function(n){return t=new FileReader,[2,new Promise((function(n,i){t.onerror=function(){t.abort(),i(new DOMException("Problem reading file"))},t.onload=function(){n(t.result)},t.readAsDataURL(e)}))]}))}))},t.prototype.ResizeBase64Img=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(i){return n=new Image,[2,new Promise((function(i,o){n.onload=function(){var e=n.height/n.width,o=document.createElement("canvas");o.width=t,o.height=t*e;var a=o.getContext("2d");n.width,a.scale(o.width/n.width,o.height/n.height),a.drawImage(n,0,0);var r=o.toDataURL();i(r)},n.onerror=function(){o(new DOMException("Problem loading image file"))},n.src=e}))]}))}))},t.prototype.render=function(){var e,t,n,i,o,a=this,r=manywho.model.getComponent(this.props.id,this.props.flowKey),s=manywho.state.getComponent(this.props.id,this.props.flowKey),l="",c="",h=(null===(e=r.attributes)||void 0===e?void 0:e.title)||"Select File";"true"===(null===(n=null===(t=r.attributes)||void 0===t?void 0:t.transparent)||void 0===n?void 0:n.toLowerCase())?(l="file-picker-transparent "+(null===(i=r.attributes)||void 0===i?void 0:i.classes),c="file-picker-header-transparent ",h=""):(l="file-picker "+(null===(o=r.attributes)||void 0===o?void 0:o.classes),c="file-picker-header ");var p,f,m,g,y,v,w={width:"-webkit-fill-available",height:"-webkit-fill-available"};if(!1===r.isVisible&&(w.display="none"),r.width&&(w.width=r.width+"px"),r.height&&(w.height=r.height+"px"),p=this.pickFile,f=u.createElement("span",{className:"glyphicon glyphicon-remove file-picker-header-button",onClick:this.clearFile,title:"Clear selected file"}),"ContentString"===r.contentType)v=s.contentValue;else{var b=void 0;s&&s.objectData&&(b=s.objectData instanceof Array?s.objectData[0]:s.objectData),b||(b=r.objectData&&r.objectData instanceof Array?r.objectData[0]:r.objectData)&&manywho.state.setComponent(this.props.id,{objectData:[b]},this.props.flowKey,!0),b&&(y=manywho.utils.getObjectDataProperty(b.properties,r.attributes.fileNameField).contentValue,g=manywho.utils.getObjectDataProperty(b.properties,r.attributes.dataField).contentValue)}return g?(m=g.substring(g.indexOf(":")+1,g.indexOf(";")),v=this.isImage(m)?u.createElement("img",{style:{maxHeight:"100%",maxWidth:"100%",width:"auto",OObjectFit:"cover"},ref:function(e){a.img=e},className:"file-picker-image",src:g,onLoad:this.rescaleImage}):u.createElement("span",{className:"file-picker-file-name"},y)):v=u.createElement("div",{style:{display:"flex",flexDirection:"column",flexGrow:1}},u.createElement("div",{style:{margin:"auto",display:"flex",flexDirection:"column"}},u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"No file selected"),u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"Click to select a file"))),this.lastContent=u.createElement("div",{className:l,style:w},u.createElement(d.DialogBox,{ref:function(e){a.messageBox=e}}),u.createElement("div",{className:c},u.createElement("div",{className:"file-picker-header-left"},u.createElement("span",{className:"file-picker-header-title"},h)),u.createElement("div",{className:"file-picker-header-right"},f)),u.createElement("div",{className:"file-picker-body",onClick:p,ref:function(e){a.imgDiv=e}},v,u.createElement("input",{ref:function(e){a.fileInput=e},type:"file",className:"file-file",onChange:this.fileSelected}))),this.lastContent},t}(u.Component);t.default=h,manywho.component.register("FilePicker",h)},629:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(687),t)},804:e=>{"use strict";e.exports=React}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var a=t[i]={exports:{}};return e[i].call(a.exports,a,a.exports,n),a.exports}(629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXBpY2tlci5qcyIsIm1hcHBpbmdzIjoiMmlGQUFBLGdCQUVBLE9BS0Esa0JBY0ksV0FBWUEsR0FBWixNQUNJLFlBQU1BLElBQU0sSyxPQWRoQixFQUFBQyxVQUF1QixJQUFJQyxFQUkzQixFQUFBQyxlQUF5QixFQUN6QixFQUFBQyxZQUFzQixHQUN0QixFQUFBQyxjQUFxQixHQUVyQixFQUFBQyxjQUFxQixFQUFLQyxXQUUxQixFQUFBQyxJQUFjLEVBQ2QsRUFBQUMsS0FBZSxFQUtYLEVBQUtDLFlBQWMsRUFBS0EsWUFBWUMsS0FBSyxHQUN6QyxFQUFLQyxtQkFBcUIsRUFBS0EsbUJBQW1CRCxLQUFLLEdBQ3ZELEVBQUtFLFdBQWEsRUFBS0EsV0FBV0YsS0FBSyxHQUN2QyxFQUFLSixXQUFhLEVBQUtBLFdBQVdJLEtBQUssRyxFQXFML0MsT0F6TStCLE9BdUIzQixZQUFBRyxVQUFBLFNBQVVDLEdBRVIsR0FEQUMsS0FBS0QsT0FBU0EsRUFDWEMsS0FBS0QsT0FBUSxDQUVaLElBQU1FLEVBQWdCRCxLQUFLRCxPQUFPRyxhQUFhQyxZQUFjLEVBQ3ZEQyxFQUFnQkosS0FBS0QsT0FBT0csYUFBYUcsYUFBZSxFQUN4REMsRUFBZ0JOLEtBQUtELE9BQU9JLFlBQWMsRUFDMUNJLEVBQWdCUCxLQUFLRCxPQUFPTSxhQUFlLEVBRWpETCxLQUFLUCxLQUFPUSxFQUFnQkssRUFDNUJOLEtBQUtSLElBQU1ZLEVBQWdCRyxFQUMzQlAsS0FBS0QsT0FBT1MsVUFBVUMsSUFBSSxTQUMxQlQsS0FBS1UsbUJBSVgsWUFBQUEsZUFBQSxXQUNLVixLQUFLRCxTQUNKQyxLQUFLRCxPQUFPWSxNQUFNbEIsS0FBT08sS0FBS1AsS0FBTyxLQUNyQ08sS0FBS0QsT0FBT1ksTUFBTW5CLElBQU1RLEtBQUtSLElBQU0sT0FJekMsWUFBQW9CLGdCQUFBLFNBQWdCQyxHQUtaLE9BSkdBLEVBQUVDLGlCQUFpQkQsRUFBRUMsa0JBQ3JCRCxFQUFFRSxnQkFBZ0JGLEVBQUVFLGlCQUN2QkYsRUFBRUcsY0FBYSxFQUNmSCxFQUFFSSxhQUFZLEdBQ1AsR0FJWCxZQUFBQyxrQkFBQSxXQUNFbEIsS0FBS21CLGVBR0QsWUFBQXRCLFdBQU4sU0FBaUJ1QixFQUFlQyxFQUFjQyxFQUE4QkMsRywwRUFDMUV2QixLQUFLYixlQUFnQixFQUNyQmEsS0FBS1osWUFBY2dDLEVBQ25CcEIsS0FBS3dCLGNBQWdCSCxFQUNyQnJCLEtBQUtWLGNBQWdCaUMsR0FBV3ZCLEtBQUtULFdBQ3JDUyxLQUFLWCxjQUFnQmlDLEVBQ3JCdEIsS0FBS21CLGMsV0FJRCxZQUFBNUIsV0FBTixTQUFpQnNCLEcsMEVBQ2JiLEtBQUtiLGVBQWdCLEVBQ3JCYSxLQUFLWixZQUFjLEdBQ25CWSxLQUFLd0IsbUJBQWdCQyxFQUNyQnpCLEtBQUtWLG1CQUFnQm1DLEVBQ3JCekIsS0FBS1gsY0FBZ0IsR0FDckJXLEtBQUttQixjLFdBTVQsWUFBQXpCLFlBQUEsU0FBWW1CLEdBQVosV0FDUWEsRUFBWSxDQUNoQixHQUFJLFdBQ0ZiLEVBQUVFLGlCQUNGLEVBQUt4QixlQUlMbUMsRUFBS2IsRUFBRWMsVUFDVEQsRUFBS2IsRUFBRWMsWUFPWCxZQUFBL0IsbUJBQUEsU0FBbUJpQixHQUVaYixLQUFLRCxRQUNEQyxLQUFLRCxPQUFPNkIsU0FBU2YsRUFBRWdCLFNBQzFCN0IsS0FBS1QsY0FPZixZQUFBdUMsT0FBQSxlQUNNVCxFQUROLE9BRUUsSUFBMEIsSUFBdkJyQixLQUFLYixjQUNOa0MsRUFDSSxnQ0FHRCxDQUVILElBREEsSUFBTUMsRUFBOEIsRyxXQUMxQlMsR0FDTlQsRUFBUVUsS0FDSiwwQkFDSUMsVUFBVSxpQ0FDVmIsTUFBTSxTQUNOYyxZQUFhLFNBQUNyQixHQUFPQSxFQUFFQyxrQkFBa0JpQixFQUFPSSxZQUUvQ0osRUFBT0ssU0FQQSxNQUFBcEMsS0FBS1gsY0FBTCxlLEVBQUosTUFXaEJnQyxFQUNFLHVCQUNFWSxVQUFVLGtCQUNWSSxZQUFhLFNBQUN4QixHQUFPLEVBQUt3QixZQUFZeEIsSUFDdEN5QixVQUFXLFNBQUN6QixHQUFPLEVBQUt5QixVQUFVekIsSUFDbENxQixZQUFhLFNBQUNyQixHQUFPLEVBQUtqQixtQkFBbUJpQixJQUM3QzBCLGNBQWUsU0FBQTFCLEdBQU1BLEVBQUVFLGlCQUFrQkYsRUFBRUMsa0JBQXFCLEVBQUs5QixNQUFNdUQsZUFBZSxFQUFLdkQsTUFBTXVELGtCQUVyRyx1QkFDRU4sVUFBVSxnQkFDVk8sSUFBSyxTQUFDQyxHQUFVLEVBQUszQyxVQUFVMkMsS0FFN0IsdUJBQUtSLFVBQVUsZ0JBQ2IsdUJBQ0VBLFVBQVUsc0JBQ1ZDLFlBQWEsU0FBQ3JCLEdBQU8sRUFBS3FCLFlBQVlyQixLQUV0Qyx1QkFBS0YsTUFBTyxDQUFDK0IsUUFBUyxPQUFRQyxjQUFlLE1BQU9DLFNBQVUsSUFDNUQsd0JBQU1YLFVBQVUsNkJBQTZCakMsS0FBS1osY0FFcEQsdUJBQUt1QixNQUFPLENBQUMrQixRQUFTLE9BQVFDLGNBQWUsTUFBT0UsV0FBWSxPQUFRRCxTQUFVLElBQ2hGLHdCQUNFWCxVQUFVLHdEQUNWYixNQUFNLFFBQ05jLFlBQWEsU0FBQ3JCLEdBQU9BLEVBQUVDLGtCQUFtQixFQUFLeEIscUJBSXJELHVCQUFLMkMsVUFBVSxxQkFDWCx1QkFBS0EsVUFBVSw0QkFDZGpDLEtBQUt3QixnQkFHUix1QkFBS1MsVUFBVSwyQkFDVlgsTUFPbkIsT0FBT0QsR0FHVCxZQUFBeUIsT0FBQSxTQUFPckQsRUFBY0QsR0FDakJRLEtBQUtQLEtBQU9BLEVBQ1pPLEtBQUtSLElBQU1BLEVBQ1hRLEtBQUtVLGtCQUdULFlBQUF3QixZQUFBLFNBQVlyQixHQUdWLElBQUlrQyxFQUFhbEMsRUFBRWdCLE9BQU9tQix3QkFDdEJDLEVBQXVCcEMsRUFBRXFDLFFBQVVILEVBQVd2RCxJQUNsRFEsS0FBS2YsVUFBWUMsRUFBVWlFLE1BQU1DLEVBQWVyRCxPQUFRQyxLQUFNYSxFQUFFd0MsUUFBVU4sRUFBV3RELEtBQU13RCxJQUc3RixZQUFBWixZQUFBLFNBQVl4QixHQUVQYixLQUFLZixVQUFVcUUsT0FBU0YsRUFBZXJELFFBRXhDQyxLQUFLOEMsT0FBT2pDLEVBQUV3QyxRQUFVckQsS0FBS2YsVUFBVXNFLGFBQWMxQyxFQUFFcUMsUUFBVWxELEtBQUtmLFVBQVVnRSxlQUlwRixZQUFBWCxVQUFBLFNBQVV6QixHQUVMYixLQUFLZixVQUFVcUUsT0FBU0YsRUFBZXJELFFBRXhDQyxLQUFLZixVQUFVdUUsSUFBSSxLQUFLM0MsRUFBRXdDLFFBQVN4QyxFQUFFcUMsVUFHM0MsRUF6TUEsQ0FBK0JPLEVBQU1DLFdBQXhCLEVBQUFDLFVBQUFBLEVBMk1iLElBVWNQLEVBVkQsRUFBQVEsa0JBSVQsU0FBWXhCLEVBQWVELEdBQ3pCbkMsS0FBS29DLE1BQVFBLEVBQ2JwQyxLQUFLbUMsUUFBVUEsR0FJbkIsU0FBWWlCLEdBRVIseUJBQ0EsdUJBQ0EscUJBQ0EsbUJBQ0EsdUJBTkosQ0FBWUEsRUFBQSxFQUFBQSxpQkFBQSxFQUFBQSxlQUFjLEtBUzFCLGlCQVVJLGFBRUlwRCxLQUFLc0QsS0FBT0YsRUFBZVMsUUFDM0I3RCxLQUFLOEQsY0FBZ0IsS0FDckI5RCxLQUFLK0QsY0FBZ0IsS0FDckIvRCxLQUFLZ0UsT0FBUyxFQUNkaEUsS0FBS2lFLE9BQVMsRUFDZGpFLEtBQUt1RCxhQUFlLEVBQ3BCdkQsS0FBS2lELGFBQWUsRUErQjVCLE9BNUJrQixFQUFBRSxNQUFkLFNBQW9CRyxFQUFzQlEsRUFBb0JFLEVBQWdCQyxHQUUxRSxJQUFNQyxFQUFpQixJQUFJaEYsRUFRM0IsT0FQQWdGLEVBQUlaLEtBQU9BLEVBQ1hZLEVBQUlKLGNBQWdCQSxFQUNwQkksRUFBSUgsY0FBZ0IsS0FDcEJHLEVBQUlGLE9BQVNBLEVBQ2JFLEVBQUlELE9BQVNBLEVBQ2JDLEVBQUlYLGFBQWVTLEVBQ25CRSxFQUFJakIsYUFBZWdCLEVBQ1pDLEdBR1gsWUFBQUMsS0FBQSxTQUFLSCxFQUFnQkMsR0FFakJqRSxLQUFLZ0UsT0FBU0EsRUFDZGhFLEtBQUtpRSxPQUFTQSxHQUdsQixZQUFBVCxJQUFBLFNBQUkzQixFQUFhbUMsRUFBZ0JDLEdBRzdCakUsS0FBSytELGNBQWdCbEMsRUFDckI3QixLQUFLZ0UsT0FBU0EsRUFDZGhFLEtBQUtpRSxPQUFTQSxFQUVkakUsS0FBS3NELEtBQUtGLEVBQWVTLFNBRWpDLEVBakRBLEdBQWEsRUFBQTNFLFVBQUFBLEcsMEVDbE9Ua0YsUUFBZ0JDLGVBQ2pCRCxRQUFnQkMsYUFBZSxHQUMvQkQsUUFBZ0JDLGFBQWFDLG9CQUFzQixHQUNuREYsUUFBZ0JDLGFBQWFFLGNBQWdCLEdBQzdDSCxRQUFnQkMsYUFBYUcscUJBQXVCLEdBQ3BESixRQUFnQkMsYUFBYUksY0FBZ0IsR0FDN0NMLFFBQWdCQyxhQUFhSyxjQUFnQixHQUM3Q04sUUFBZ0JDLGFBQWFNLHNCQUM3QlAsUUFBZ0JDLGFBQWFPLFFBQVUsR0FFdkNSLFFBQWdCQyxhQUFhUSxXQUFhLFNBQUNDLEVBQXFCQyxHQU83RCxJQUFJLElBQU1DLEtBTlBGLEdBQ0lHLE9BQU9DLGVBQWUsWUFBY0MsUUFBUUMsT0FBUyxHQUNwRE4sRUFBSU8saUJBQWlCLFVBQVdGLFNBSXRCZixRQUFnQkMsYUFBYUMsb0JBRTFDRixRQUFnQkMsYUFBYUMsb0JBQW9CVSxHQUFLRixFQUFLQyxJQUluRVgsUUFBZ0JDLGFBQWFpQixLQUFPLFNBQUNSLEVBQXFCQyxHQUV2RCxJQUFJLElBQU1DLEtBQVFaLFFBQWdCQyxhQUFhSSxjQUUxQ0wsUUFBZ0JDLGFBQWFJLGNBQWNPLEdBQUtGLEVBQUtDLElBSTdEWCxRQUFnQkMsYUFBYWtCLEtBQU8sU0FBQ1QsRUFBcUJDLEdBRXZELElBQUksSUFBTUMsS0FBUVosUUFBZ0JDLGFBQWFFLGNBRTFDSCxRQUFnQkMsYUFBYUUsY0FBY1MsR0FBS0YsRUFBS0MsSUFJN0RYLFFBQWdCQyxhQUFhbUIsWUFBYyxTQUFDVixFQUFxQkMsR0FFOUQsSUFBSSxJQUFNQyxLQUFRWixRQUFnQkMsYUFBYUcscUJBRTFDSixRQUFnQkMsYUFBYUcscUJBQXFCUSxHQUFLRixFQUFLQyxJQUlwRVgsUUFBZ0JDLGFBQWFvQixLQUFPLFNBQUNYLEVBQXFCQyxHQUV2RCxJQUFJLElBQU1DLEtBQVFaLFFBQWdCQyxhQUFhSyxjQUUxQ04sUUFBZ0JDLGFBQWFLLGNBQWNNLEdBQUtGLEVBQUtDLElBSTdEWCxRQUFnQkMsYUFBYXFCLHNCQUF3QixTQUFDdkQsRUFBc0R3RCxHQUN4R3ZCLFFBQWdCQyxhQUFhQyxvQkFBb0JxQixHQUFleEQsR0FHcEVpQyxRQUFnQkMsYUFBYXVCLHlCQUEyQixTQUFDRCxVQUM5Q3ZCLFFBQWdCQyxhQUFhQyxvQkFBb0JxQixJQUc1RHZCLFFBQWdCQyxhQUFhd0IsdUJBQXlCLFNBQUMxRCxFQUFzRHdELEdBQ3pHdkIsUUFBZ0JDLGFBQWFHLHFCQUFxQm1CLEdBQWV4RCxHQUdyRWlDLFFBQWdCQyxhQUFheUIsMEJBQTRCLFNBQUNILFVBQy9DdkIsUUFBZ0JDLGFBQWFHLHFCQUFxQm1CLElBRzdEdkIsUUFBZ0JDLGFBQWEwQixnQkFBa0IsU0FBQzVELEVBQXNEd0QsR0FDbEd2QixRQUFnQkMsYUFBYUksY0FBY2tCLEdBQWV4RCxHQUc5RGlDLFFBQWdCQyxhQUFhMkIsbUJBQXFCLFNBQUNMLFVBQ3hDdkIsUUFBZ0JDLGFBQWFJLGNBQWNrQixJQUd0RHZCLFFBQWdCQyxhQUFhNEIsZ0JBQWtCLFNBQUM5RCxFQUFzRHdELEdBQ2xHdkIsUUFBZ0JDLGFBQWFFLGNBQWNvQixHQUFleEQsR0FHOURpQyxRQUFnQkMsYUFBYTZCLG1CQUFxQixTQUFDUCxVQUN4Q3ZCLFFBQWdCQyxhQUFhRSxjQUFjb0IsSUFHdER2QixRQUFnQkMsYUFBYThCLGdCQUFrQixTQUFDaEUsRUFBc0R3RCxHQUNsR3ZCLFFBQWdCQyxhQUFhSyxjQUFjaUIsR0FBZXhELEdBRzlEaUMsUUFBZ0JDLGFBQWErQixtQkFBcUIsU0FBQ1QsVUFDeEN2QixRQUFnQkMsYUFBYUssY0FBY2lCLElBR3ZEdkIsUUFBUWlDLFNBQVNDLFdBQVcsS0FBTSxDQUM5QkMsT0FBUSxDQUNKMUIsV0FBYVQsUUFBZ0JDLGFBQWFRLFdBQzFDVSxLQUFPbkIsUUFBZ0JDLGFBQWFrQixLQUNwQ0UsS0FBT3JCLFFBQWdCQyxhQUFhb0IsTUFFeENlLGVBQWdCLENBQ1ozQixXQUFhVCxRQUFnQkMsYUFBYVEsV0FDMUNVLEtBQU9uQixRQUFnQkMsYUFBYW1CLFlBQ3BDQyxLQUFPckIsUUFBZ0JDLGFBQWFvQixNQUV4Q0gsS0FBTSxDQUNGVCxXQUFhVCxRQUFnQkMsYUFBYVEsV0FDMUNVLEtBQU9uQixRQUFnQkMsYUFBYWlCLEtBQ3BDRyxLQUFPckIsUUFBZ0JDLGFBQWFvQixVLG84RUNoSGhELGdCQUNBLE9BRUEsT0FFQSxhQUlBLGNBV0ksV0FBWXpHLEdBQVosTUFDSSxZQUFNQSxJQUFNLEssT0FYaEIsRUFBQXlILGFBQXVCLEtBR3ZCLEVBQUFDLEtBQWUsR0FLZixFQUFBQyxZQUFvQiw0QkFJaEIsRUFBS0MsYUFBZSxFQUFLQSxhQUFhakgsS0FBSyxHQUMzQyxFQUFLa0gsa0JBQW9CLEVBQUtBLGtCQUFrQmxILEtBQUssR0FDckQsRUFBS21ILGdCQUFrQixFQUFLQSxnQkFBZ0JuSCxLQUFLLEdBQ2pELEVBQUtvSCxVQUFZLEVBQUtBLFVBQVVwSCxLQUFLLEdBQ3JDLEVBQUtxSCxTQUFXLEVBQUtBLFNBQVNySCxLQUFLLEdBQ25DLEVBQUtzSCxRQUFVLEVBQUtBLFFBQVF0SCxLQUFLLEdBQ2pDLEVBQUt1SCxhQUFlLEVBQUtBLGFBQWF2SCxLQUFLLEdBQzNDLEVBQUt3SCxVQUFZLEVBQUtBLFVBQVV4SCxLQUFLLEdBRXJDLEVBQUt5SCxNQUFNLENBQ1BDLGFBQVM1RixFQUNUNkYsY0FBVTdGLEcsRUFtYnRCLE9BM2N3QyxPQTZCOUIsWUFBQTBGLFVBQU4sU0FBZ0JyQyxFQUFVQyxHLHlFQUVGLFlBQWpCRCxFQUFJeUMsWUFLQ3pDLEVBQUl5QyxXLFdBT1YsWUFBQXJHLGtCQUFOLFcsMEZBRUksU0FBTWxCLEtBQUt3SCxpQixjQUFYLFNBQ0F4SCxLQUFLbUIsYyxZQUdILFlBQUFxRyxjQUFOLFcsa0ZBQ1FDLEVBQVFyRCxRQUFRcUQsTUFBTUMsYUFBYTFILEtBQUtoQixNQUFNMkksR0FBSTNILEtBQUtoQixNQUFNNEksU0FDN0RDLEVBQWlCLEdBQ0ssa0JBQXRCSixFQUFNSyxZQUNORCxFQUFTRSxhQUFlTixFQUFNTSxhQUc5QkYsRUFBU0csV0FBYVAsRUFBTU8sV0FFaEM1RCxRQUFRZ0QsTUFBTWEsYUFBYWpJLEtBQUtoQixNQUFNMkksR0FBSUUsRUFBVTdILEtBQUtoQixNQUFNNEksU0FBUSxHLFdBRzNFLFlBQUFNLHFCQUFBLGFBS0EsWUFBQWhCLGFBQUEsU0FBYXJHLEdBQ2FiLEtBQUttSSxJQUFJQyxPQUNScEksS0FBS21JLElBQUlFLFFBSTNCckksS0FBS21JLElBQUl4SCxNQUFNeUgsTUFBUSxPQUN2QnBJLEtBQUttSSxJQUFJeEgsTUFBTTBILE9BQVMsU0FHeEJySSxLQUFLbUksSUFBSXhILE1BQU15SCxNQUFRLE9BQ3ZCcEksS0FBS21JLElBQUl4SCxNQUFNMEgsT0FBUyxTQUtqQyxZQUFBQywwQkFBQSxTQUEwQkMsR0FDdEJDLFFBQVFDLElBQUksU0FHVixZQUFBMUIsVUFBTixXLGlHQUs4QixtQkFKdEJVLEVBQVFyRCxRQUFRcUQsTUFBTUMsYUFBYTFILEtBQUtoQixNQUFNMkksR0FBSTNILEtBQUtoQixNQUFNNEksVUFJdkRFLFlBQ04xRCxRQUFRZ0QsTUFBTWEsYUFBYWpJLEtBQUtoQixNQUFNMkksR0FBSSxDQUFDSSxhQUFjLElBQUsvSCxLQUFLaEIsTUFBTTRJLFNBQVEsSUFHN0VSLEVBQVFoRCxRQUFRZ0QsTUFBTU0sYUFBYTFILEtBQUtoQixNQUFNMkksR0FBSTNILEtBQUtoQixNQUFNNEksU0FDN0RjLE9BQU8sR0FFUEEsRUFERHRCLEVBQU1ZLFlBQWNaLEVBQU1ZLHNCQUFzQlcsTUFDckN2QixFQUFNWSxXQUFXLEdBR2pCWixFQUFNWSxjQUlaVSxFQUREakIsRUFBTU8sWUFBY1AsRUFBTU8sc0JBQXNCVyxNQUNyQ2xCLEVBQU1PLFdBQVcsR0FHakJQLEVBQU1PLFlBR3JCVSxJQUNDdEUsUUFBUXdFLE1BQU1DLHNCQUFzQkgsRUFBUUksV0FBMkIsUUFBaEIsRUFBQXJCLEVBQU1zQixrQkFBVSxlQUFFQyxjQUFjLElBQ3ZGNUUsUUFBUXdFLE1BQU1DLHNCQUFzQkgsRUFBUUksV0FBMkIsUUFBaEIsRUFBQXJCLEVBQU1zQixrQkFBVSxlQUFFRSxlQUFlLElBQ3hGN0UsUUFBUXdFLE1BQU1DLHNCQUFzQkgsRUFBUUksV0FBMkIsUUFBaEIsRUFBQXJCLEVBQU1zQixrQkFBVSxlQUFFRyxjQUFjLElBQ3ZGOUUsUUFBUXdFLE1BQU1DLHNCQUFzQkgsRUFBUUksV0FBMkIsUUFBaEIsRUFBQXJCLEVBQU1zQixrQkFBVSxlQUFFSSxVQUFVLElBQ25GL0UsUUFBUXdFLE1BQU1DLHNCQUFzQkgsRUFBUUksV0FBMkIsUUFBaEIsRUFBQXJCLEVBQU1zQixrQkFBVSxlQUFFSyxVQUFVLElBRW5GVixFQUFRVyxZQUFXLEdBRXZCakYsUUFBUWdELE1BQU1hLGFBQWFqSSxLQUFLaEIsTUFBTTJJLEdBQUksQ0FBQ0ssV0FBWSxDQUFDVSxJQUFXMUksS0FBS2hCLE1BQU00SSxTQUFRLElBRTFGeEQsUUFBUWtGLFVBQVVDLFlBQVl2SixLQUFNeUgsRUFBT3pILEtBQUtoQixNQUFNNEksUyxXQUcxRCxZQUFBWixTQUFBLFdBQ0loSCxLQUFLd0osVUFBVUMsTUFBUSxHQUN2QnpKLEtBQUt3SixVQUFVRSxTQUduQixZQUFBekMsUUFBQSxTQUFRMEMsR0FDSixPQUFRQSxHQUNKLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxZQUNMLElBQUssWUFDTCxJQUFLLGFBQ0wsSUFBSyxZQUNELE9BQU8sRUFFWCxRQUNJLE9BQU8sSUFJYixZQUFBL0MsYUFBTixTQUFtQi9GLEcsK0lBQ1hiLEtBQUt3SixVQUFVSSxPQUFTNUosS0FBS3dKLFVBQVVJLE1BQU14RSxPQUFTLEdBQ2xELEVBQVFoQixRQUFRcUQsTUFBTUMsYUFBYTFILEtBQUtoQixNQUFNMkksR0FBSTNILEtBQUtoQixNQUFNNEksU0FDM0RpQyxFQUFhN0osS0FBS3dKLFVBQVVJLE1BQU0sR0FDbEIsR0FBTTVKLEtBQUs2RyxrQkFBa0JnRCxLQUhuRCxNLGNBR0lDLEVBQWtCLFNBQ2hCQyxFQUFnQkYsRUFBS0csS0FBS0MsWUFBWSxNQUFRLEVBQUlKLEVBQUtHLEtBQUtFLFVBQVUsRUFBR0wsRUFBS0csS0FBS0MsWUFBWSxNQUFRSixFQUFLRyxLQUM1R0csRUFBY04sRUFBS0csS0FBS0MsWUFBWSxNQUFRLEVBQUlKLEVBQUtHLEtBQUtFLFVBQVVMLEVBQUtHLEtBQUtDLFlBQVksS0FBTyxHQUFHRyxjQUFnQixHQUNwSEMsRUFBY1IsRUFBS3ZHLEtBQ25CZ0gsRUFBZVQsRUFBS1MsTUFFdEJDLEVBQWtCQyxTQUFTLEVBQU16QixXQUFzQixXQUFLLElBQ3JELEdBQUt1QixFQUFnQixJQUFWQyxHQUNsQnZLLEtBQUt5SyxXQUFXNUssV0FDWixpQkFDQyw0QiwrQkFBb0N5SyxFLG9EQUF5REMsR0FDOUYsQ0FBQyxJQUFJLEVBQUEzRyxrQkFBa0IsS0FBSzVELEtBQUt5SyxXQUFXbEwsYyxPQUpqRCxNLGNBU0tTLEtBQUtpSCxRQUFRb0QsSUFDVEssRUFBa0IsRUFDbEJGLFNBQVMsRUFBTXpCLFdBQXNCLFdBQUssS0FBTyxJQUNqRDJCLEVBQVVGLFNBQVMsRUFBTXpCLFdBQXNCLFlBRWhEMkIsRUFBVSxFQUNDLEdBQU0xSyxLQUFLOEcsZ0JBQWdCZ0QsRUFBU1ksSUFEL0MsT0FMSCxNLE9BTUlaLEVBQVUsUyx1QkFNUSxrQkFBdEIsRUFBTWhDLFlBQ04xRCxRQUFRZ0QsTUFBTWEsYUFBYWpJLEtBQUtoQixNQUFNMkksR0FBSSxDQUFDSSxhQUFjK0IsR0FBVTlKLEtBQUtoQixNQUFNNEksU0FBUSxJQUdsRlIsRUFBUWhELFFBQVFnRCxNQUFNTSxhQUFhMUgsS0FBS2hCLE1BQU0ySSxHQUFJM0gsS0FBS2hCLE1BQU00SSxTQUM3RGMsT0FBTyxHQUdQQSxFQUREdEIsRUFBTVksWUFBY1osRUFBTVksc0JBQXNCVyxNQUNyQ3ZCLEVBQU1ZLFdBQVcsR0FHakJaLEVBQU1ZLGNBSVpVLEVBREQsRUFBTVYsWUFBYyxFQUFNQSxzQkFBc0JXLE1BQ3JDLEVBQU1YLFdBQVcsR0FHakIsRUFBTUEsWUFHckJVLElBQ0N0RSxRQUFRd0UsTUFBTUMsc0JBQXNCSCxFQUFRSSxXQUEyQixRQUFoQixJQUFNQyxrQkFBVSxlQUFFQyxjQUFjZSxHQUN2RjNGLFFBQVF3RSxNQUFNQyxzQkFBc0JILEVBQVFJLFdBQTJCLFFBQWhCLElBQU1DLGtCQUFVLGVBQUVFLGVBQWVrQixHQUN4Ri9GLFFBQVF3RSxNQUFNQyxzQkFBc0JILEVBQVFJLFdBQTJCLFFBQWhCLElBQU1DLGtCQUFVLGVBQUVHLGNBQWNtQixHQUN2RmpHLFFBQVF3RSxNQUFNQyxzQkFBc0JILEVBQVFJLFdBQTJCLFFBQWhCLElBQU1DLGtCQUFVLGVBQUVJLFVBQVVtQixHQUNuRmxHLFFBQVF3RSxNQUFNQyxzQkFBc0JILEVBQVFJLFdBQTJCLFFBQWhCLElBQU1DLGtCQUFVLGVBQUVLLFVBQVVVLElBR3ZGMUYsUUFBUWdELE1BQU1hLGFBQWFqSSxLQUFLaEIsTUFBTTJJLEdBQUksQ0FBQ0ssV0FBWSxDQUFDVSxJQUFXMUksS0FBS2hCLE1BQU00SSxTQUFRLEtBS3RFLFFBQWhCLElBQU1tQixrQkFBVSxlQUFFNEIsYUFBYyxFQUFNNUIsV0FBVzRCLFdBQVd2RixPQUFTLEdBQ2pFd0YsRUFBZ0J4RyxRQUFRcUQsTUFBTW9ELFlBQVk3SyxLQUFLaEIsTUFBTTJJLEdBQUczSCxLQUFLaEIsTUFBTTRJLFVBQ25Fa0QsRUFBb0JGLEVBQVNHLE1BQUssU0FBQ0MsR0FBaUIsT0FBQUEsRUFBUXZCLFFBQVUsRUFBTVYsV0FBVzRCLGVBRXZGLEdBQU12RyxRQUFRa0YsVUFBVTJCLFVBQVVILEVBQWMsS0FBTTlLLEtBQUtoQixNQUFNNEksVUFEbEUsT0FISCxNLE9BSUksUyxvQ0FJSnhELFFBQVFrRixVQUFVQyxZQUFZdkosS0FBTSxFQUFPQSxLQUFLaEIsTUFBTTRJLFMsbUNBU2hFLFlBQUFmLGtCQUFOLFNBQXdCZ0QsRyx5RUFHcEIsT0FGTXFCLEVBQVMsSUFBSUMsV0FFWixDQUFQLEVBQU8sSUFBSUMsU0FBUSxTQUFDQyxFQUFTQyxHQUN6QkosRUFBT0ssUUFBVSxXQUNiTCxFQUFPTSxRQUNQRixFQUFPLElBQUlHLGFBQWEsMEJBRTVCUCxFQUFPUSxPQUFTLFdBQ1pMLEVBQVFILEVBQU9TLFNBRW5CVCxFQUFPVSxjQUFjL0IsY0FJdkIsWUFBQS9DLGdCQUFOLFNBQXNCK0UsRUFBZ0J6RCxHLHlFQUdsQyxPQURNRCxFQUFNLElBQUkyRCxNQUNULENBQVAsRUFBTyxJQUFJVixTQUFRLFNBQUNDLEVBQVNDLEdBQ3pCbkQsRUFBSXVELE9BQVMsV0FDVCxJQUFNSyxFQUFjNUQsRUFBSUUsT0FBU0YsRUFBSUMsTUFDL0I0RCxFQUFTQyxTQUFTQyxjQUFjLFVBRXRDRixFQUFPNUQsTUFBUUEsRUFDZjRELEVBQU8zRCxPQUFTRCxFQUFRMkQsRUFFeEIsSUFBTUksRUFBVUgsRUFBT0ksV0FBVyxNQUVGakUsRUFBSUMsTUFDcEMrRCxFQUFRRSxNQUFNTCxFQUFPNUQsTUFBUUQsRUFBSUMsTUFBUTRELEVBQU8zRCxPQUFTRixFQUFJRSxRQUU3RDhELEVBQVFHLFVBQVVuRSxFQUFLLEVBQUksR0FDM0IsSUFBTW9FLEVBQVVQLEVBQU9RLFlBQ3ZCbkIsRUFBUWtCLElBRVpwRSxFQUFJb0QsUUFBVSxXQUNWRCxFQUFPLElBQUlHLGFBQWEsZ0NBRTVCdEQsRUFBSXNFLElBQU1aLGFBSWxCLFlBQUEvSixPQUFBLGUsVUFBQSxPQUNRMkYsRUFBUXJELFFBQVFxRCxNQUFNQyxhQUFhMUgsS0FBS2hCLE1BQU0ySSxHQUFJM0gsS0FBS2hCLE1BQU00SSxTQUM3RFIsRUFBUWhELFFBQVFnRCxNQUFNTSxhQUFhMUgsS0FBS2hCLE1BQU0ySSxHQUFJM0gsS0FBS2hCLE1BQU00SSxTQUU3RDhFLEVBQXlCLEdBQ3pCQyxFQUFzQixHQUN0QnZMLEdBQWdDLFFBQWhCLEVBQUFxRyxFQUFNc0Isa0JBQVUsZUFBRTNILFFBQVMsY0FFSyxVQUFwQixRQUE3QixFQUFnQixRQUFoQixFQUFBcUcsRUFBTXNCLGtCQUFVLGVBQUU2RCxtQkFBVyxlQUFFeEMsZ0JBQzlCc0MsRUFBaUIsNEJBQTZDLFFBQWhCLEVBQUFqRixFQUFNc0Isa0JBQVUsZUFBRThELFNBQ2hFRixFQUFjLGtDQUNkdkwsRUFBTSxLQUdOc0wsRUFBaUIsZ0JBQWlDLFFBQWhCLEVBQUFqRixFQUFNc0Isa0JBQVUsZUFBRThELFNBQ3BERixFQUFjLHVCQUdsQixJQWNJRyxFQUdBQyxFQVlBcEQsRUFDQXFELEVBQ0ExRixFQUVBakcsRUFqQ0FWLEVBQXVCLENBQzNCLE1BQVkseUJBQ1osT0FBYSwwQkFrQ2IsSUFoQ3VCLElBQXBCOEcsRUFBTXdGLFlBQ0x0TSxFQUFNK0IsUUFBVSxRQUVqQitFLEVBQU1XLFFBQ0x6SCxFQUFNeUgsTUFBTVgsRUFBTVcsTUFBUSxNQUUzQlgsRUFBTVksU0FDTDFILEVBQU0wSCxPQUFPWixFQUFNWSxPQUFTLE1BT2hDeUUsRUFBVzlNLEtBQUtnSCxTQUNoQitGLEVBQ0ksd0JBQ0k5SyxVQUFVLHVEQUNWaUwsUUFBU2xOLEtBQUsrRyxVQUNkM0YsTUFBTSx3QkFhVyxrQkFBdEJxRyxFQUFNSyxZQUNMekcsRUFBUStGLEVBQU1XLGlCQUViLENBQ0QsSUFBSVcsT0FBTyxFQUNSdEIsR0FBU0EsRUFBTVksYUFFVlUsRUFERHRCLEVBQU1ZLHNCQUFzQlcsTUFDbkJ2QixFQUFNWSxXQUFXLEdBR2pCWixFQUFNWSxZQUlsQlUsSUFHSUEsRUFERGpCLEVBQU1PLFlBQWNQLEVBQU1PLHNCQUFzQlcsTUFDdkNsQixFQUFNTyxXQUFXLEdBR2pCUCxFQUFNTyxhQUdkNUQsUUFBUWdELE1BQU1hLGFBQWFqSSxLQUFLaEIsTUFBTTJJLEdBQUksQ0FBQ0ssV0FBWSxDQUFDVSxJQUFXMUksS0FBS2hCLE1BQU00SSxTQUFRLEdBSTNGYyxJQUNDcEIsRUFBV2xELFFBQVF3RSxNQUFNdUUsc0JBQXNCekUsRUFBUUksV0FBV3JCLEVBQU1zQixXQUEwQixlQUFHaEIsYUFDckdpRixFQUFjNUksUUFBUXdFLE1BQU11RSxzQkFBc0J6RSxFQUFRSSxXQUFXckIsRUFBTXNCLFdBQXNCLFdBQUdoQixjQXVHNUcsT0FqR0lpRixHQUNBckQsRUFBV3FELEVBQVk5QyxVQUFVOEMsRUFBWUksUUFBUSxLQUFPLEVBQUdKLEVBQVlJLFFBQVEsTUFHL0UvTCxFQURBckIsS0FBS2lILFFBQVEwQyxHQUVULHVCQUNJaEosTUFBTyxDQUNIME0sVUFBVyxPQUNYQyxTQUFVLE9BQ1ZsRixNQUFPLE9BQ1BtRixXQUFZLFNBRWhCL0ssSUFBSyxTQUFDZ0wsR0FBK0IsRUFBS3JGLElBQU1xRixHQUNoRHZMLFVBQVUsb0JBQ1Z3SyxJQUFLTyxFQUNMUyxPQUNJek4sS0FBS2tILGVBTWIsd0JBQ0lqRixVQUFVLHlCQUVUcUYsSUFNYmpHLEVBQ0ksdUJBQ0lWLE1BQU8sQ0FDSCtCLFFBQVMsT0FDVEMsY0FBZSxTQUNmQyxTQUFVLElBR2QsdUJBQ0lqQyxNQUFPLENBQ0grTSxPQUFRLE9BQ1JoTCxRQUFTLE9BQ1RDLGNBQWUsV0FHbkIsd0JBQ0lWLFVBQVUsd0JBQ1Z0QixNQUFPLENBQUMrTSxPQUFRLFNBRWYsb0JBRUwsd0JBQ0l6TCxVQUFVLHdCQUNWdEIsTUFBTyxDQUFDK00sT0FBUSxTQUVmLDRCQVNyQjFOLEtBQUsyRyxZQUNHLHVCQUNJMUUsVUFBV3lLLEVBQ1gvTCxNQUFPQSxHQUVQLGdCQUFDLEVBQUFnRCxVQUFTLENBQ05uQixJQUFLLFNBQUNnTCxHQUF3QixFQUFLL0MsV0FBYStDLEtBRXBELHVCQUFLdkwsVUFBVzBLLEdBQ1osdUJBQUsxSyxVQUFVLDJCQUNYLHdCQUFNQSxVQUFVLDRCQUE0QmIsSUFFaEQsdUJBQUthLFVBQVUsNEJBQ1Y4SyxJQUlULHVCQUNJOUssVUFBVSxtQkFDVmlMLFFBQVNKLEVBQ1R0SyxJQUFLLFNBQUNnTCxHQUFrQixFQUFLRyxPQUFTSCxJQUVyQ25NLEVBQ0QseUJBQ0ltQixJQUFLLFNBQUNvTCxHQUFjLEVBQUtwRSxVQUFZb0UsR0FDckN0SyxLQUFLLE9BQ0xyQixVQUFVLFlBQ1Y0TCxTQUFVN04sS0FBSzRHLGlCQUs1QjVHLEtBQUsyRyxhQUdwQixFQTNjQSxDQUF3Q2xELEVBQU1DLFcsWUE2YzlDVSxRQUFRa0YsVUFBVXdFLFNBQVMsYUFBY0MsSSwyWkN0ZHpDLGEscUJDQUFDLEVBQU9DLFFBQVV4SyxRQ0NieUssRUFBMkIsSUFHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQjNNLElBQWpCNE0sRUFDSCxPQUFPQSxFQUFhSixRQUdyQixJQUFJRCxFQUFTRSxFQUF5QkUsR0FBWSxDQUdqREgsUUFBUyxJQU9WLE9BSEFLLEVBQW9CRixHQUFVRyxLQUFLUCxFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTRSxHQUdwRUgsRUFBT0MsUUNsQldFLENBQW9CLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jdXN0Ly4vc3JjL0RpYWxvZ0JveC50c3giLCJ3ZWJwYWNrOi8vY3VzdC8uL3NyYy9FdmVudE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vY3VzdC8uL3NyYy9GaWxlUGlja2VyLnRzeCIsIndlYnBhY2s6Ly9jdXN0Ly4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9jdXN0L2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9jdXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2N1c3Qvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCAnLi9EaWFsb2dCb3guY3NzJztcclxuXHJcblxyXG5cclxuLy8gRGVjbGFyYXRpb24gb2YgdGhlIGNvbXBvbmVudCBhcyBSZWFjdCBDbGFzcyBDb21wb25lbnRcclxuZXhwb3J0IGNsYXNzIERpYWxvZ0JveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4ge1xyXG4gICAgZHJhZ0V2ZW50OiBEcmFnRXZlbnQgPSBuZXcgRHJhZ0V2ZW50KCk7XHJcbiAgICBtb2RhbDogYW55O1xyXG4gICAgZGlhbG9nOiBhbnk7XHJcblxyXG4gICAgZGlhbG9nVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgZGlhbG9nVGl0bGU6IHN0cmluZyA9ICcnO1xyXG4gICAgZGlhbG9nQnV0dG9uczogYW55ID0gW107XHJcbiAgICBkaWFsb2dDb250ZW50OiBhbnk7XHJcbiAgICBkaWFsb2dPbkNsb3NlOiBhbnkgPSB0aGlzLmhpZGVEaWFsb2c7XHJcblxyXG4gICAgdG9wOiBudW1iZXIgPSAwO1xyXG4gICAgbGVmdDogbnVtYmVyID0gMDtcclxuICAvLyBJbml0IG9mIHRoZSBjb21wb25lbnQgYmVmb3JlIGl0IGlzIG1vdW50ZWQuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZUtleVVwID0gdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrID0gdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2suYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnNob3dEaWFsb2cgPSB0aGlzLnNob3dEaWFsb2cuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmhpZGVEaWFsb2cgPSB0aGlzLmhpZGVEaWFsb2cuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXREaWFsb2coZGlhbG9nOiBIVE1MRGl2RWxlbWVudCkge1xyXG4gICAgICB0aGlzLmRpYWxvZyA9IGRpYWxvZztcclxuICAgICAgaWYodGhpcy5kaWFsb2cpIHtcclxuXHJcbiAgICAgICAgICBjb25zdCBwYXJlbnRYQ2VudGVyID0gdGhpcy5kaWFsb2cub2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIC8gMjtcclxuICAgICAgICAgIGNvbnN0IHBhcmVudFlDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICAgIGNvbnN0IGRpYWxvZ1hPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRXaWR0aCAvIDI7XHJcbiAgICAgICAgICBjb25zdCBkaWFsb2dZT2Zmc2V0ID0gdGhpcy5kaWFsb2cuY2xpZW50SGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgICB0aGlzLmxlZnQgPSBwYXJlbnRYQ2VudGVyIC0gZGlhbG9nWE9mZnNldDtcclxuICAgICAgICAgIHRoaXMudG9wID0gcGFyZW50WUNlbnRlciAtIGRpYWxvZ1lPZmZzZXQ7XHJcbiAgICAgICAgICB0aGlzLmRpYWxvZy5jbGFzc0xpc3QuYWRkKCdzaG93bicpO1xyXG4gICAgICAgICAgdGhpcy5wb3NpdGlvbkRpYWxvZygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcG9zaXRpb25EaWFsb2coKSB7XHJcbiAgICAgIGlmKHRoaXMuZGlhbG9nKSB7XHJcbiAgICAgICAgICB0aGlzLmRpYWxvZy5zdHlsZS5sZWZ0ID0gdGhpcy5sZWZ0ICsgXCJweFwiO1xyXG4gICAgICAgICAgdGhpcy5kaWFsb2cuc3R5bGUudG9wID0gdGhpcy50b3AgKyBcInB4XCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdG9wRXZlbnRCdWJibGUoZTogIGFueSkge1xyXG4gICAgICAgIGlmKGUuc3RvcFByb3BhZ2F0aW9uKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLmNhbmNlbEJ1YmJsZT10cnVlO1xyXG4gICAgICAgIGUucmV0dXJuVmFsdWU9ZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBsaXN0ZW5lcnMgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxyXG4gICAgY29tcG9uZW50RGlkTW91bnQoKXtcclxuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNob3dEaWFsb2codGl0bGU6IHN0cmluZywgY29udGVudDogYW55LCBidXR0b25zOiBtb2RhbERpYWxvZ0J1dHRvbltdLCBvbkNsb3NlPzogYW55KSB7XHJcbiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuZGlhbG9nVGl0bGUgPSB0aXRsZTtcclxuICAgICAgdGhpcy5kaWFsb2dDb250ZW50ID0gY29udGVudDtcclxuICAgICAgdGhpcy5kaWFsb2dPbkNsb3NlID0gb25DbG9zZSB8fCB0aGlzLmhpZGVEaWFsb2c7XHJcbiAgICAgIHRoaXMuZGlhbG9nQnV0dG9ucyA9IGJ1dHRvbnM7XHJcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgLy9yZXR1cm4gdGhpcy5wcm9wcy5wYXJlbnQuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBoaWRlRGlhbG9nKGU/IDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dUaXRsZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuZGlhbG9nQ29udGVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmRpYWxvZ09uQ2xvc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5kaWFsb2dCdXR0b25zID0gW107XHJcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIC8vcmV0dXJuIHRoaXMucHJvcHMucGFyZW50LmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgXHJcbiAgXHJcbiAgICAvLyBIYW5kbGUgdGhlIGtleSBwcmVzcyBldmVudC5cclxuICAgIGhhbmRsZUtleVVwKGU6IGFueSkge1xyXG4gICAgICBjb25zdCBrZXlzOiBhbnkgPSB7XHJcbiAgICAgICAgMjc6ICgpID0+IHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHRoaXMuaGlkZURpYWxvZygpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoa2V5c1tlLmtleUNvZGVdKSB7IFxyXG4gICAgICAgIGtleXNbZS5rZXlDb2RlXSgpOyBcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICBcclxuXHJcbiAgICAvLyBIYW5kbGUgdGhlIG1vdXNlIGNsaWNrIG9uIGJyb3dzZXIgd2luZG93LlxyXG4gICAgaGFuZGxlT3V0c2lkZUNsaWNrKGU6IGFueSkge1xyXG4gICAgICBcclxuICAgICAgaWYgKCF0aGlzLmRpYWxvZykge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmRpYWxvZy5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlRGlhbG9nKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuXHJcbiAgLy8gUmVuZGVyIHRoZSBjb21wb25lbnQgcGFzc2luZyBvbkNsb3NlUmVxdWVzdCBhbmQgY2hpbGRyZW4gYXMgcHJvcHMuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgbGV0IGNvbnRlbnQ6IGFueTtcclxuICAgIGlmKHRoaXMuZGlhbG9nVmlzaWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgY29udGVudCA9IChcclxuICAgICAgICAgIDxkaXYvPlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnN0IGJ1dHRvbnM6IEFycmF5PEpTWC5FbGVtZW50PiA9IFtdO1xyXG4gICAgICBmb3IoY29uc3QgYnV0dG9uIG9mIHRoaXMuZGlhbG9nQnV0dG9ucykge1xyXG4gICAgICAgICAgYnV0dG9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgIDxidXR0b24gXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1idXR0b24tYmFyLWJ1dHRvblwiIFxyXG4gICAgICAgICAgICAgICAgICB0aXRsZT1cIkNhbmNlbFwiIFxyXG4gICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpO2J1dHRvbi5oYW5kbGVyKCl9fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge2J1dHRvbi5sYWJlbH1cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgY29udGVudCA9IChcclxuICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtcmVkYWN0aW9uXCJcclxuICAgICAgICAgIG9uTW91c2VNb3ZlPXsoZSkgPT4ge3RoaXMub25Nb3VzZU1vdmUoZSl9fVxyXG4gICAgICAgICAgb25Nb3VzZVVwPXsoZSkgPT4ge3RoaXMub25Nb3VzZVVwKGUpfX1cclxuICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4ge3RoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKGUpfX1cclxuICAgICAgICAgIG9uQ29udGV4dE1lbnU9e2UgPT4ge2UucHJldmVudERlZmF1bHQoKTsgZS5zdG9wUHJvcGFnYXRpb24oKTtpZih0aGlzLnByb3BzLm9uQ29udGV4dE1lbnUpe3RoaXMucHJvcHMub25Db250ZXh0TWVudSgpfX19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiXHJcbiAgICAgICAgICAgIHJlZj17KG5vZGUpID0+IHt0aGlzLnNldERpYWxvZyhub2RlKX19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLWhlYWRlclwiXHJcbiAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4ge3RoaXMub25Nb3VzZURvd24oZSl9fVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBmbGV4R3JvdzogMX19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1oZWFkZXItdGl0bGVcIj57dGhpcy5kaWFsb2dUaXRsZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBtYXJnaW5MZWZ0OiAnYXV0bycsIGZsZXhHcm93OiAwfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIG1vZGFsLWRpYWxvZy1oZWFkZXItYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ2xvc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZURvd249eyhlKSA9PiB7ZS5zdG9wUHJvcGFnYXRpb24oKTsgdGhpcy5kaWFsb2dPbkNsb3NlKCl9fVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2ctYm9keS1jbGllbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5kaWFsb2dDb250ZW50fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2ID5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2ctYnV0dG9uLWJhclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2J1dHRvbnN9ICAgXHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2ID5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBtb3ZlTWUobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlcikge1xyXG4gICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICB0aGlzLnRvcCA9IHRvcDsgLy8gLSB0aGlzLmJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgIHRoaXMucG9zaXRpb25EaWFsb2coKTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGU6IGFueSkge1xyXG4gICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgIC8vaW5jbHVkZSBjb21wb25lbnQgYm91bmRpbmcgcmVjdCB0byBhbGxvdyBmb3IgbW91c2Ugb2Zmc2V0IGludG8gY29tcG9uZW50XHJcbiAgICBsZXQgY2xpZW50UmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IG1vdXNlT2Zmc2V0WTogbnVtYmVyID0gZS5jbGllbnRZIC0gY2xpZW50UmVjdC50b3A7XHJcbiAgICB0aGlzLmRyYWdFdmVudCA9IERyYWdFdmVudC5zdGFydChlRHJhZ0V2ZW50VHlwZS5kaWFsb2csIHRoaXMsIGUuY2xpZW50WCAtIGNsaWVudFJlY3QubGVmdCwgbW91c2VPZmZzZXRZKTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlKGU6IGFueSkge1xyXG4gICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgIGlmKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IGVEcmFnRXZlbnRUeXBlLmRpYWxvZylcclxuICAgIHtcclxuICAgICAgdGhpcy5tb3ZlTWUoZS5jbGllbnRYIC0gdGhpcy5kcmFnRXZlbnQubW91c2VPZmZzZXRYLCBlLmNsaWVudFkgLSB0aGlzLmRyYWdFdmVudC5tb3VzZU9mZnNldFkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwKGU6IGFueSkge1xyXG4gICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgIGlmKHRoaXMuZHJhZ0V2ZW50LnR5cGUgPT09IGVEcmFnRXZlbnRUeXBlLmRpYWxvZylcclxuICAgIHtcclxuICAgICAgdGhpcy5kcmFnRXZlbnQuZW5kKG51bGwsZS5jbGllbnRYLCBlLmNsaWVudFkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIG1vZGFsRGlhbG9nQnV0dG9uIHtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBoYW5kbGVyOiBhbnk7XHJcbiAgXHJcbiAgICBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCBoYW5kbGVyOiBhbnkpIHtcclxuICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBleHBvcnQgZW51bSBlRHJhZ0V2ZW50VHlwZVxyXG4gIHtcclxuICAgICAgdW5rbm93bixcclxuICAgICAgY2FudmFzLFxyXG4gICAgICB0YWJsZSxcclxuICAgICAgbGluayxcclxuICAgICAgZGlhbG9nXHJcbiAgfVxyXG4gIFxyXG4gIGV4cG9ydCBjbGFzcyBEcmFnRXZlbnRcclxuICB7XHJcbiAgICAgIHR5cGU6IGVEcmFnRXZlbnRUeXBlO1xyXG4gICAgICBzb3VyY2VFbGVtZW50OiBhbnk7XHJcbiAgICAgIHRhcmdldEVsZW1lbnQ6IGFueTtcclxuICAgICAgbW91c2VYOiBudW1iZXI7XHJcbiAgICAgIG1vdXNlWTogbnVtYmVyO1xyXG4gICAgICBtb3VzZU9mZnNldFg6IG51bWJlcjtcclxuICAgICAgbW91c2VPZmZzZXRZOiBudW1iZXI7XHJcbiAgXHJcbiAgICAgIGNvbnN0cnVjdG9yKClcclxuICAgICAge1xyXG4gICAgICAgICAgdGhpcy50eXBlID0gZURyYWdFdmVudFR5cGUudW5rbm93bjtcclxuICAgICAgICAgIHRoaXMuc291cmNlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZVggPSAwO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZVkgPSAwO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZU9mZnNldFggPSAwO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZU9mZnNldFkgPSAwO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHB1YmxpYyBzdGF0aWMgc3RhcnQodHlwZTogZURyYWdFdmVudFR5cGUsIHNvdXJjZUVsZW1lbnQ6IGFueSwgbW91c2VYOiBudW1iZXIsIG1vdXNlWTogbnVtYmVyKTogRHJhZ0V2ZW50XHJcbiAgICAgIHtcclxuICAgICAgICAgIGNvbnN0IGV2dDogRHJhZ0V2ZW50ID0gbmV3IERyYWdFdmVudCgpO1xyXG4gICAgICAgICAgZXZ0LnR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgZXZ0LnNvdXJjZUVsZW1lbnQgPSBzb3VyY2VFbGVtZW50O1xyXG4gICAgICAgICAgZXZ0LnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgZXZ0Lm1vdXNlWCA9IG1vdXNlWDtcclxuICAgICAgICAgIGV2dC5tb3VzZVkgPSBtb3VzZVk7XHJcbiAgICAgICAgICBldnQubW91c2VPZmZzZXRYID0gbW91c2VYO1xyXG4gICAgICAgICAgZXZ0Lm1vdXNlT2Zmc2V0WSA9IG1vdXNlWTtcclxuICAgICAgICAgIHJldHVybiBldnQ7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgZHJhZyhtb3VzZVg6IG51bWJlciwgbW91c2VZOiBudW1iZXIpXHJcbiAgICAgIHtcclxuICAgICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZVkgPSBtb3VzZVk7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgZW5kKHRhcmdldDogYW55LCBtb3VzZVg6IG51bWJlciwgbW91c2VZOiBudW1iZXIpIDogYW55XHJcbiAgICAgIHtcclxuICBcclxuICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IHRhcmdldDtcclxuICAgICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgICAgdGhpcy5tb3VzZVkgPSBtb3VzZVk7XHJcbiAgXHJcbiAgICAgICAgICB0aGlzLnR5cGU9ZURyYWdFdmVudFR5cGUudW5rbm93bjsgICAgICBcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbiIsImRlY2xhcmUgY29uc3QgbWFueXdobzogYW55O1xyXG5kZWNsYXJlIGNvbnN0IGN1bHR1cmU6IGFueTtcclxuXHJcbmlmICghKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIpIHtcclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5pbml0aWFsaXplZExpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuam9pbkxpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkO1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuaGlzdG9yeSA9IFtdO1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgaWYoeGhyKSB7XHJcbiAgICAgICAgICAgIGlmKHdpbmRvdy5oYXNPd25Qcm9wZXJ0eShcImN1bHR1cmVcIikgJiYgY3VsdHVyZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkN1bHR1cmVcIiwgY3VsdHVyZSk7IC8vXCJCcmFuZD1YTCZDb3VudHJ5PVhMJkxhbmd1YWdlPUVTJlZhcmlhbnQ9WExcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmpvaW4gPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuam9pbkxpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5qb2luTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmUgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmluaXRpYWxpemVkID0gKHhocjogWE1MSHR0cFJlcXVlc3QsIHJlcXVlc3Q6IGFueSkgPT4ge1xyXG4gICAgICAgIC8vKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcjogYW55KSA9PiBsaXN0ZW5lcih4aHIsIHJlcXVlc3QpKTtcclxuICAgICAgICBmb3IoY29uc3Qga2V5IGluIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmluaXRpYWxpemVkTGlzdGVuZXJzIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmluaXRpYWxpemVkTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWwgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZEJlZm9yZVNlbmRMaXN0ZW5lciA9IChoYW5kbGVyOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB2b2lkLCBjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVCZWZvcmVTZW5kTGlzdGVuZXIgPSAoY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZSAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkSW5pdGlhbGl6ZWRMaXN0ZW5lciA9IChoYW5kbGVyOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB2b2lkLCBjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuaW5pdGlhbGl6ZWRMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlSW5pdGlhbGl6ZWRMaXN0ZW5lciA9IChjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgZGVsZXRlIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmluaXRpYWxpemVkTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkSm9pbkxpc3RlbmVyID0gKGhhbmRsZXI6ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHZvaWQsIGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5qb2luTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZUpvaW5MaXN0ZW5lciA9IChjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgZGVsZXRlIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmpvaW5MaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIgPSAoaGFuZGxlcjogKHhocjogWE1MSHR0cFJlcXVlc3QsIHJlcXVlc3Q6IGFueSkgPT4gdm9pZCwgY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyID0gKGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBkZWxldGUgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZEZhaWxMaXN0ZW5lciA9IChoYW5kbGVyOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB2b2lkLCBjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVGYWlsTGlzdGVuZXIgPSAoY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZSAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcblxyXG4gICAgbWFueXdoby5zZXR0aW5ncy5pbml0aWFsaXplKG51bGwsIHtcclxuICAgICAgICBpbnZva2U6IHtcclxuICAgICAgICAgICAgYmVmb3JlU2VuZDogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZCxcclxuICAgICAgICAgICAgZG9uZTogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZSxcclxuICAgICAgICAgICAgZmFpbDogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXRpYWxpemF0aW9uOiB7XHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQsXHJcbiAgICAgICAgICAgIGRvbmU6IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmluaXRpYWxpemVkLFxyXG4gICAgICAgICAgICBmYWlsOiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgam9pbjoge1xyXG4gICAgICAgICAgICBiZWZvcmVTZW5kOiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kLFxyXG4gICAgICAgICAgICBkb25lOiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5qb2luLFxyXG4gICAgICAgICAgICBmYWlsOiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0e307IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vRmlsZVBpY2tlci5jc3MnO1xyXG5cclxuaW1wb3J0ICcuL0V2ZW50TWFuYWdlcic7XHJcbmltcG9ydCB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERpYWxvZ0JveCwgbW9kYWxEaWFsb2dCdXR0b24gfSBmcm9tICcuL0RpYWxvZ0JveCc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IG1hbnl3aG86IGFueTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbGVQaWNrZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8YW55LGFueT4ge1xyXG4gICAgc2VsZWN0ZWRJdGVtOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgaW1nRGl2OiBhbnk7XHJcbiAgICBpbWc6IGFueTtcclxuICAgIHRleHQ6IHN0cmluZyA9ICcnO1xyXG4gICAgZmlsZUlucHV0OiBhbnk7XHJcblxyXG4gICAgbWVzc2FnZUJveDogRGlhbG9nQm94O1xyXG5cclxuICAgIGxhc3RDb250ZW50OiBhbnkgPSAoPGRpdj48L2Rpdj4pO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5maWxlU2VsZWN0ZWQgPSB0aGlzLmZpbGVTZWxlY3RlZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmlsZVJlYWRBc0RhdGFVUkwgPSB0aGlzLmZpbGVSZWFkQXNEYXRhVVJMLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5SZXNpemVCYXNlNjRJbWcgPSB0aGlzLlJlc2l6ZUJhc2U2NEltZy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJGaWxlID0gdGhpcy5jbGVhckZpbGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnBpY2tGaWxlID0gdGhpcy5waWNrRmlsZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaXNJbWFnZSA9IHRoaXMuaXNJbWFnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVzY2FsZUltYWdlID0gdGhpcy5yZXNjYWxlSW1hZ2UuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmZsb3dNb3ZlZCA9IHRoaXMuZmxvd01vdmVkLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGU9e1xyXG4gICAgICAgICAgICBpbWdEYXRhOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGZpbGVOYW1lOiB1bmRlZmluZWRcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZsb3dNb3ZlZCh4aHI6IGFueSwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgbGV0IG1lOiBhbnkgPSB0aGlzO1xyXG4gICAgICAgIGlmKHhoci5pbnZva2VUeXBlPT09J0ZPUldBUkQnKSB7XHJcbiAgICAgICAgICAgLy9tYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lUmVzcG9uc2UoeGhyLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgIC8vYXdhaXQgdGhpcy5wcmVzZXJ2ZVN0YXRlKCk7XHJcbiAgICAgICAgICAgLy90aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoeGhyLmludm9rZVR5cGU9PT0nU1lOQycpIHtcclxuICAgICAgICAgICAgLy9tYW55d2hvLm1vZGVsLnBhcnNlRW5naW5lU3luY1Jlc3BvbnNlKHhociwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnByZXNlcnZlU3RhdGUoKTtcclxuICAgICAgICAgICAgLy90aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgIH1cclxuICAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIodGhpcy5mbG93TW92ZWQsIHRoaXMucHJvcHMuaWQpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJlc2VydmVTdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwcmVzZXJ2ZVN0YXRlKCl7XHJcbiAgICAgICAgbGV0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBsZXQgbmV3U3RhdGUgOiBhbnkgPSB7fTtcclxuICAgICAgICBpZiAobW9kZWwuY29udGVudFR5cGUgPT09ICdDb250ZW50U3RyaW5nJykge1xyXG4gICAgICAgICAgICBuZXdTdGF0ZS5jb250ZW50VmFsdWUgPSBtb2RlbC5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdTdGF0ZS5vYmplY3REYXRhID0gbW9kZWwub2JqZWN0RGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgbmV3U3RhdGUsIHRoaXMucHJvcHMuZmxvd0tleSx0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLnByb3BzLmlkKTtcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHJlc2NhbGVJbWFnZShlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gdGhpcy5pbWcud2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0OiBudW1iZXIgPSB0aGlzLmltZy5oZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIG5lZWQgdG8gY2hlY2sgb24gSUUgY29tcGF0aWJpbGl0eSBoZXJlIC0gaSB0aGluayBhc3BlY3QgcmF0aW9uIGlzIHdyb25nIGluIElFXHJcbiAgICAgICAgaWYgKHdpZHRoID49IGhlaWdodCkge1xyXG4gICAgICAgICAgICAgdGhpcy5pbWcuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgICB0aGlzLmltZy5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaW1nRGl2LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgdGhpcy5pbWcuc3R5bGUud2lkdGggPSAnYXV0byc7XHJcbiAgICAgICAgICAgICB0aGlzLmltZy5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuaW1nRGl2LnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAncm93JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicGluZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjbGVhckZpbGUoKSB7XHJcbiAgICAgICAgbGV0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgbGV0IG5ld1N0YXRlIDogYW55ID0ge307XHJcbiAgICAgICAgaWYgKG1vZGVsLmNvbnRlbnRUeXBlID09PSAnQ29udGVudFN0cmluZycpIHtcclxuICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwge2NvbnRlbnRWYWx1ZTogXCJcIn0sIHRoaXMucHJvcHMuZmxvd0tleSx0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgIGxldCBvYmpEYXRhOiBhbnk7XHJcbiAgICAgICAgICAgIGlmKHN0YXRlLm9iamVjdERhdGEgJiYgc3RhdGUub2JqZWN0RGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBvYmpEYXRhID0gc3RhdGUub2JqZWN0RGF0YVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9iakRhdGEgPSBzdGF0ZS5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFvYmpEYXRhKXtcclxuICAgICAgICAgICAgICAgIGlmKG1vZGVsLm9iamVjdERhdGEgJiYgbW9kZWwub2JqZWN0RGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqRGF0YSA9IG1vZGVsLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmpEYXRhID0gbW9kZWwub2JqZWN0RGF0YTtcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYob2JqRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqRGF0YS5wcm9wZXJ0aWVzLG1vZGVsLmF0dHJpYnV0ZXM/LmZpbGVOYW1lRmllbGQsXCJcIik7XHJcbiAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnNldE9iamVjdERhdGFQcm9wZXJ0eShvYmpEYXRhLnByb3BlcnRpZXMsbW9kZWwuYXR0cmlidXRlcz8uZXh0ZW5zaW9uRmllbGQsXCJcIik7XHJcbiAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnNldE9iamVjdERhdGFQcm9wZXJ0eShvYmpEYXRhLnByb3BlcnRpZXMsbW9kZWwuYXR0cmlidXRlcz8ubWltZVR5cGVGaWVsZCxcIlwiKTtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8udXRpbHMuc2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iakRhdGEucHJvcGVydGllcyxtb2RlbC5hdHRyaWJ1dGVzPy5zaXplRmllbGQsXCJcIik7XHJcbiAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnNldE9iamVjdERhdGFQcm9wZXJ0eShvYmpEYXRhLnByb3BlcnRpZXMsbW9kZWwuYXR0cmlidXRlcz8uZGF0YUZpZWxkLFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIG9iakRhdGEuaXNTZWxlY3RlZD1mYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB7b2JqZWN0RGF0YTogW29iakRhdGFdfSwgdGhpcy5wcm9wcy5mbG93S2V5LHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtYW55d2hvLmNvbXBvbmVudC5oYW5kbGVFdmVudCh0aGlzLCBtb2RlbCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBwaWNrRmlsZSgpIHtcclxuICAgICAgICB0aGlzLmZpbGVJbnB1dC52YWx1ZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuZmlsZUlucHV0LmNsaWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNJbWFnZShtaW1lVHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgc3dpdGNoIChtaW1lVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdpbWFnZS9qcGcnOlxyXG4gICAgICAgICAgICBjYXNlICdpbWFnZS9qcGVnJzpcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UvYm1wJzpcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UvZ2lmJzpcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UvZ2lmZic6XHJcbiAgICAgICAgICAgIGNhc2UgJ2ltYWdlL3BuZyc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZpbGVTZWxlY3RlZChlOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5maWxlSW5wdXQuZmlsZXMgJiYgdGhpcy5maWxlSW5wdXQuZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlOiBGaWxlID0gdGhpcy5maWxlSW5wdXQuZmlsZXNbMF07XHJcbiAgICAgICAgICAgIGxldCBkYXRhVVJMOiBzdHJpbmcgPSBhd2FpdCB0aGlzLmZpbGVSZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICBjb25zdCBmbmFtZTogc3RyaW5nID0gZmlsZS5uYW1lLmxhc3RJbmRleE9mKCcuJykgPj0gMCA/IGZpbGUubmFtZS5zdWJzdHJpbmcoMCwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKCcuJykpIDogZmlsZS5uYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBleHQ6IHN0cmluZyA9IGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpID49IDAgPyBmaWxlLm5hbWUuc3Vic3RyaW5nKGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpICsgMSkudG9Mb3dlckNhc2UoKSA6ICcnO1xyXG4gICAgICAgICAgICBjb25zdCB0eXA6IHN0cmluZyA9IGZpbGUudHlwZTtcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZTogbnVtYmVyID0gZmlsZS5zaXplO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1heFNpemU6IG51bWJlciA9IHBhcnNlSW50KG1vZGVsLmF0dHJpYnV0ZXNbXCJtYXhTaXplS0JcIl0gfHwgMCk7XHJcbiAgICAgICAgICAgIGlmKG1heFNpemU+MCAmJiBzaXplPihtYXhTaXplICogMTAwMCkpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQm94LnNob3dEaWFsb2coXHJcbiAgICAgICAgICAgICAgICAgICAgXCJGaWxlIFRvbyBMYXJnZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICg8c3Bhbj5UaGUgZmlsZSB5b3UgaGF2ZSBjaG9zZW4gaXMgeyBzaXplIH0gYnl0ZXMgbG9uZyBhbmQgZXhjZWVkcyB0aGUgbWF4aW11bSBmaWxlIHNpemUgb2YgeyBtYXhTaXplIH08L3NwYW4+KSxcclxuICAgICAgICAgICAgICAgICAgICBbbmV3IG1vZGFsRGlhbG9nQnV0dG9uKFwiT2tcIix0aGlzLm1lc3NhZ2VCb3guaGlkZURpYWxvZyldXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW1hZ2UodHlwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWdTaXplOiBudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChtb2RlbC5hdHRyaWJ1dGVzWydpbWFnZVNpemUnXSB8fCAnMCcpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdTaXplID0gcGFyc2VJbnQobW9kZWwuYXR0cmlidXRlc1snaW1hZ2VTaXplJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihpbWdTaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVVJMID0gYXdhaXQgdGhpcy5SZXNpemVCYXNlNjRJbWcoZGF0YVVSTCwgaW1nU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBuZXdTdGF0ZSA6IGFueSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmNvbnRlbnRUeXBlID09PSAnQ29udGVudFN0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB7Y29udGVudFZhbHVlOiBkYXRhVVJMfSwgdGhpcy5wcm9wcy5mbG93S2V5LHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqRGF0YTogYW55O1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHN0YXRlLm9iamVjdERhdGEgJiYgc3RhdGUub2JqZWN0RGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iakRhdGEgPSBzdGF0ZS5vYmplY3REYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqRGF0YSA9IHN0YXRlLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFvYmpEYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobW9kZWwub2JqZWN0RGF0YSAmJiBtb2RlbC5vYmplY3REYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iakRhdGEgPSBtb2RlbC5vYmplY3REYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqRGF0YSA9IG1vZGVsLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG9iakRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqRGF0YS5wcm9wZXJ0aWVzLG1vZGVsLmF0dHJpYnV0ZXM/LmZpbGVOYW1lRmllbGQsZm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnV0aWxzLnNldE9iamVjdERhdGFQcm9wZXJ0eShvYmpEYXRhLnByb3BlcnRpZXMsbW9kZWwuYXR0cmlidXRlcz8uZXh0ZW5zaW9uRmllbGQsZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqRGF0YS5wcm9wZXJ0aWVzLG1vZGVsLmF0dHJpYnV0ZXM/Lm1pbWVUeXBlRmllbGQsdHlwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqRGF0YS5wcm9wZXJ0aWVzLG1vZGVsLmF0dHJpYnV0ZXM/LnNpemVGaWVsZCxzaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFueXdoby51dGlscy5zZXRPYmplY3REYXRhUHJvcGVydHkob2JqRGF0YS5wcm9wZXJ0aWVzLG1vZGVsLmF0dHJpYnV0ZXM/LmRhdGFGaWVsZCxkYXRhVVJMKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vYmplY3REYXRhLmlzU2VsZWN0ZWQ9dHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB7b2JqZWN0RGF0YTogW29iakRhdGFdfSwgdGhpcy5wcm9wcy5mbG93S2V5LHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLmF0dHJpYnV0ZXM/Lm9uU2VsZWN0ZWQgJiYgbW9kZWwuYXR0cmlidXRlcy5vblNlbGVjdGVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3V0Y29tZXM6IGFueSA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZXModGhpcy5wcm9wcy5pZCx0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbG9zZU91dGNvbWU6IGFueSA9IG91dGNvbWVzLmZpbmQoKG91dGNvbWU6IGFueSkgPT4gb3V0Y29tZS52YWx1ZSA9PT0gbW9kZWwuYXR0cmlidXRlcy5vblNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihjbG9zZU91dGNvbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbWFueXdoby5jb21wb25lbnQub25PdXRjb21lKGNsb3NlT3V0Y29tZSwgbnVsbCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLmNvbXBvbmVudC5oYW5kbGVFdmVudCh0aGlzLCBtb2RlbCwgdGhpcy5wcm9wcy5mbG93S2V5LCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZpbGVSZWFkQXNEYXRhVVJMKGZpbGU6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWFkZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdQcm9ibGVtIHJlYWRpbmcgZmlsZScpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIFJlc2l6ZUJhc2U2NEltZyhiYXNlNjQ6IHN0cmluZywgd2lkdGg6IG51bWJlcik6IFByb21pc2U8YW55PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IGltZy5oZWlnaHQgLyBpbWcud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aWR0aCAqIGFzcGVjdFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWR1Y3Rpb25GYWN0b3IgPSB3aWR0aCAvIGltZy53aWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2NhbGUoY2FudmFzLndpZHRoIC8gaW1nLndpZHRoICwgY2FudmFzLmhlaWdodCAvIGltZy5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGltZywgMCAsIDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzaXplZCA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzaXplZCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ1Byb2JsZW0gbG9hZGluZyBpbWFnZSBmaWxlJykpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbWcuc3JjID0gYmFzZTY0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGxldCBzdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMucHJvcHMuaWQsIHRoaXMucHJvcHMuZmxvd0tleSk7XHJcblxyXG4gICAgICAgIGxldCBjb21wb25lbnRDbGFzczogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBsZXQgaGVhZGVyQ2xhc3M6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IHRpdGxlOiBzdHJpbmcgPSBtb2RlbC5hdHRyaWJ1dGVzPy50aXRsZSB8fCAnU2VsZWN0IEZpbGUnO1xyXG5cclxuICAgICAgICBpZihtb2RlbC5hdHRyaWJ1dGVzPy50cmFuc3BhcmVudD8udG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIpe1xyXG4gICAgICAgICAgICBjb21wb25lbnRDbGFzcyA9IFwiZmlsZS1waWNrZXItdHJhbnNwYXJlbnQgXCIgKyBtb2RlbC5hdHRyaWJ1dGVzPy5jbGFzc2VzO1xyXG4gICAgICAgICAgICBoZWFkZXJDbGFzcyA9IFwiZmlsZS1waWNrZXItaGVhZGVyLXRyYW5zcGFyZW50IFwiO1xyXG4gICAgICAgICAgICB0aXRsZT1cIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29tcG9uZW50Q2xhc3MgPSBcImZpbGUtcGlja2VyIFwiICsgbW9kZWwuYXR0cmlidXRlcz8uY2xhc3NlcztcclxuICAgICAgICAgICAgaGVhZGVyQ2xhc3MgPSBcImZpbGUtcGlja2VyLWhlYWRlciBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgc3R5bGUud2lkdGg9XCItd2Via2l0LWZpbGwtYXZhaWxhYmxlXCI7XHJcbiAgICAgICAgc3R5bGUuaGVpZ2h0PVwiLXdlYmtpdC1maWxsLWF2YWlsYWJsZVwiO1xyXG5cclxuICAgICAgICBpZihtb2RlbC5pc1Zpc2libGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYobW9kZWwud2lkdGgpIHtcclxuICAgICAgICAgICAgc3R5bGUud2lkdGg9bW9kZWwud2lkdGggKyBcInB4XCJcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYobW9kZWwuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHN0eWxlLmhlaWdodD1tb2RlbC5oZWlnaHQgKyBcInB4XCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmaWxlUGljazogYW55O1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjbGVhckJ1dHRvbjogYW55O1xyXG4gICAgICAgIGZpbGVQaWNrID0gdGhpcy5waWNrRmlsZTtcclxuICAgICAgICBjbGVhckJ1dHRvbiA9IChcclxuICAgICAgICAgICAgPHNwYW4gXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBmaWxlLXBpY2tlci1oZWFkZXItYnV0dG9uXCIgXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsZWFyRmlsZX1cclxuICAgICAgICAgICAgICAgIHRpdGxlPVwiQ2xlYXIgc2VsZWN0ZWQgZmlsZVwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgbGV0IGZpbGU6IGFueTtcclxuICAgICAgICBsZXQgbWltZVR5cGU6IHN0cmluZztcclxuICAgICAgICBsZXQgZmlsZUNvbnRlbnQ6IHN0cmluZztcclxuICAgICAgICBsZXQgZmlsZU5hbWU6IHN0cmluZztcclxuICAgICAgICBsZXQgZXh0ZW5zaW9uOiBzdHJpbmc7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ6IGFueTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYobW9kZWwuY29udGVudFR5cGUgPT09IFwiQ29udGVudFN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ9c3RhdGUuY29udGVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IG9iakRhdGE6IGFueTtcclxuICAgICAgICAgICAgaWYoc3RhdGUgJiYgc3RhdGUub2JqZWN0RGF0YSl7XHJcbiAgICAgICAgICAgICAgICBpZihzdGF0ZS5vYmplY3REYXRhIGluc3RhbmNlb2YgQXJyYXkpe1xyXG4gICAgICAgICAgICAgICAgICAgIG9iakRhdGE9c3RhdGUub2JqZWN0RGF0YVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iakRhdGE9c3RhdGUub2JqZWN0RGF0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKCFvYmpEYXRhKXtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKG1vZGVsLm9iamVjdERhdGEgJiYgbW9kZWwub2JqZWN0RGF0YSBpbnN0YW5jZW9mIEFycmF5KXtcclxuICAgICAgICAgICAgICAgICAgICBvYmpEYXRhPW1vZGVsLm9iamVjdERhdGFbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmpEYXRhPW1vZGVsLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihvYmpEYXRhKXtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLnByb3BzLmlkLCB7b2JqZWN0RGF0YTogW29iakRhdGFdfSwgdGhpcy5wcm9wcy5mbG93S2V5LHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZihvYmpEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IG1hbnl3aG8udXRpbHMuZ2V0T2JqZWN0RGF0YVByb3BlcnR5KG9iakRhdGEucHJvcGVydGllcyxtb2RlbC5hdHRyaWJ1dGVzW1wiZmlsZU5hbWVGaWVsZFwiXSkuY29udGVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZmlsZUNvbnRlbnQgPSBtYW55d2hvLnV0aWxzLmdldE9iamVjdERhdGFQcm9wZXJ0eShvYmpEYXRhLnByb3BlcnRpZXMsbW9kZWwuYXR0cmlidXRlc1tcImRhdGFGaWVsZFwiXSkuY29udGVudFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vZmlsZSA9IHRoaXMuZ2V0U3RhdGVWYWx1ZSgpIGFzIEZsb3dPYmplY3REYXRhO1xyXG5cclxuICAgICAgICBpZiAoZmlsZUNvbnRlbnQpIHtcclxuICAgICAgICAgICAgbWltZVR5cGUgPSBmaWxlQ29udGVudC5zdWJzdHJpbmcoZmlsZUNvbnRlbnQuaW5kZXhPZignOicpICsgMSwgZmlsZUNvbnRlbnQuaW5kZXhPZignOycpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ltYWdlKG1pbWVUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IChcclxuICAgICAgICAgICAgICAgICAgICA8aW1nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT09iamVjdEZpdDogJ2NvdmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXsoZWxlbWVudDogSFRNTEltYWdlRWxlbWVudCkgPT4ge3RoaXMuaW1nID0gZWxlbWVudDsgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlsZS1waWNrZXItaW1hZ2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmM9e2ZpbGVDb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkxvYWQ9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNjYWxlSW1hZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGVudCA9IChcclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaWxlLXBpY2tlci1maWxlLW5hbWVcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2ZpbGVOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXhHcm93OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlsZS1waWNrZXItZmlsZS1uYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7bWFyZ2luOiBcImF1dG9cIn19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcIk5vIGZpbGUgc2VsZWN0ZWRcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlsZS1waWNrZXItZmlsZS1uYW1lXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7bWFyZ2luOiBcImF1dG9cIn19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcIkNsaWNrIHRvIHNlbGVjdCBhIGZpbGVcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5sYXN0Q29udGVudCA9IChcclxuICAgICAgICAgICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjb21wb25lbnRDbGFzc31cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGV9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ0JveFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9eyhlbGVtZW50OiBEaWFsb2dCb3gpID0+IHt0aGlzLm1lc3NhZ2VCb3ggPSBlbGVtZW50fX1cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtoZWFkZXJDbGFzc30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsZS1waWNrZXItaGVhZGVyLWxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImZpbGUtcGlja2VyLWhlYWRlci10aXRsZVwiPnt0aXRsZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbGUtcGlja2VyLWhlYWRlci1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NsZWFyQnV0dG9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaWxlLXBpY2tlci1ib2R5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZmlsZVBpY2t9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsZW1lbnQ6IGFueSkgPT4ge3RoaXMuaW1nRGl2ID0gZWxlbWVudDsgfX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtjb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsZTogYW55KSA9PiB7dGhpcy5maWxlSW5wdXQgPSBlbGU7IH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmaWxlLWZpbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuZmlsZVNlbGVjdGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RDb250ZW50O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxubWFueXdoby5jb21wb25lbnQucmVnaXN0ZXIoJ0ZpbGVQaWNrZXInLCBGaWxlUGlja2VyKTtcclxuXHJcbiIsImV4cG9ydCAqIGZyb20gJy4vRmlsZVBpY2tlcic7IiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyOSk7XG4iXSwibmFtZXMiOlsicHJvcHMiLCJkcmFnRXZlbnQiLCJEcmFnRXZlbnQiLCJkaWFsb2dWaXNpYmxlIiwiZGlhbG9nVGl0bGUiLCJkaWFsb2dCdXR0b25zIiwiZGlhbG9nT25DbG9zZSIsImhpZGVEaWFsb2ciLCJ0b3AiLCJsZWZ0IiwiaGFuZGxlS2V5VXAiLCJiaW5kIiwiaGFuZGxlT3V0c2lkZUNsaWNrIiwic2hvd0RpYWxvZyIsInNldERpYWxvZyIsImRpYWxvZyIsInRoaXMiLCJwYXJlbnRYQ2VudGVyIiwib2Zmc2V0UGFyZW50IiwiY2xpZW50V2lkdGgiLCJwYXJlbnRZQ2VudGVyIiwiY2xpZW50SGVpZ2h0IiwiZGlhbG9nWE9mZnNldCIsImRpYWxvZ1lPZmZzZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJwb3NpdGlvbkRpYWxvZyIsInN0eWxlIiwic3RvcEV2ZW50QnViYmxlIiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJjb21wb25lbnREaWRNb3VudCIsImZvcmNlVXBkYXRlIiwidGl0bGUiLCJjb250ZW50IiwiYnV0dG9ucyIsIm9uQ2xvc2UiLCJkaWFsb2dDb250ZW50IiwidW5kZWZpbmVkIiwia2V5cyIsImtleUNvZGUiLCJjb250YWlucyIsInRhcmdldCIsInJlbmRlciIsImJ1dHRvbiIsInB1c2giLCJjbGFzc05hbWUiLCJvbk1vdXNlRG93biIsImhhbmRsZXIiLCJsYWJlbCIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwib25Db250ZXh0TWVudSIsInJlZiIsIm5vZGUiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImZsZXhHcm93IiwibWFyZ2luTGVmdCIsIm1vdmVNZSIsImNsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtb3VzZU9mZnNldFkiLCJjbGllbnRZIiwic3RhcnQiLCJlRHJhZ0V2ZW50VHlwZSIsImNsaWVudFgiLCJ0eXBlIiwibW91c2VPZmZzZXRYIiwiZW5kIiwiUmVhY3QiLCJDb21wb25lbnQiLCJEaWFsb2dCb3giLCJtb2RhbERpYWxvZ0J1dHRvbiIsInVua25vd24iLCJzb3VyY2VFbGVtZW50IiwidGFyZ2V0RWxlbWVudCIsIm1vdXNlWCIsIm1vdXNlWSIsImV2dCIsImRyYWciLCJtYW55d2hvIiwiZXZlbnRNYW5hZ2VyIiwiYmVmb3JlU2VuZExpc3RlbmVycyIsImRvbmVMaXN0ZW5lcnMiLCJpbml0aWFsaXplZExpc3RlbmVycyIsImpvaW5MaXN0ZW5lcnMiLCJmYWlsTGlzdGVuZXJzIiwib3V0Y29tZUJlaW5nVHJpZ2dlcmVkIiwiaGlzdG9yeSIsImJlZm9yZVNlbmQiLCJ4aHIiLCJyZXF1ZXN0Iiwia2V5Iiwid2luZG93IiwiaGFzT3duUHJvcGVydHkiLCJjdWx0dXJlIiwibGVuZ3RoIiwic2V0UmVxdWVzdEhlYWRlciIsImpvaW4iLCJkb25lIiwiaW5pdGlhbGl6ZWQiLCJmYWlsIiwiYWRkQmVmb3JlU2VuZExpc3RlbmVyIiwiY29tcG9uZW50SWQiLCJyZW1vdmVCZWZvcmVTZW5kTGlzdGVuZXIiLCJhZGRJbml0aWFsaXplZExpc3RlbmVyIiwicmVtb3ZlSW5pdGlhbGl6ZWRMaXN0ZW5lciIsImFkZEpvaW5MaXN0ZW5lciIsInJlbW92ZUpvaW5MaXN0ZW5lciIsImFkZERvbmVMaXN0ZW5lciIsInJlbW92ZURvbmVMaXN0ZW5lciIsImFkZEZhaWxMaXN0ZW5lciIsInJlbW92ZUZhaWxMaXN0ZW5lciIsInNldHRpbmdzIiwiaW5pdGlhbGl6ZSIsImludm9rZSIsImluaXRpYWxpemF0aW9uIiwic2VsZWN0ZWRJdGVtIiwidGV4dCIsImxhc3RDb250ZW50IiwiZmlsZVNlbGVjdGVkIiwiZmlsZVJlYWRBc0RhdGFVUkwiLCJSZXNpemVCYXNlNjRJbWciLCJjbGVhckZpbGUiLCJwaWNrRmlsZSIsImlzSW1hZ2UiLCJyZXNjYWxlSW1hZ2UiLCJmbG93TW92ZWQiLCJzdGF0ZSIsImltZ0RhdGEiLCJmaWxlTmFtZSIsImludm9rZVR5cGUiLCJwcmVzZXJ2ZVN0YXRlIiwibW9kZWwiLCJnZXRDb21wb25lbnQiLCJpZCIsImZsb3dLZXkiLCJuZXdTdGF0ZSIsImNvbnRlbnRUeXBlIiwiY29udGVudFZhbHVlIiwib2JqZWN0RGF0YSIsInNldENvbXBvbmVudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiaW1nIiwid2lkdGgiLCJoZWlnaHQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29uc29sZSIsImxvZyIsIm9iakRhdGEiLCJBcnJheSIsInV0aWxzIiwic2V0T2JqZWN0RGF0YVByb3BlcnR5IiwicHJvcGVydGllcyIsImF0dHJpYnV0ZXMiLCJmaWxlTmFtZUZpZWxkIiwiZXh0ZW5zaW9uRmllbGQiLCJtaW1lVHlwZUZpZWxkIiwic2l6ZUZpZWxkIiwiZGF0YUZpZWxkIiwiaXNTZWxlY3RlZCIsImNvbXBvbmVudCIsImhhbmRsZUV2ZW50IiwiZmlsZUlucHV0IiwidmFsdWUiLCJjbGljayIsIm1pbWVUeXBlIiwiZmlsZXMiLCJmaWxlIiwiZGF0YVVSTCIsImZuYW1lIiwibmFtZSIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwiZXh0IiwidG9Mb3dlckNhc2UiLCJ0eXAiLCJzaXplIiwibWF4U2l6ZSIsInBhcnNlSW50IiwibWVzc2FnZUJveCIsImltZ1NpemUiLCJvblNlbGVjdGVkIiwib3V0Y29tZXMiLCJnZXRPdXRjb21lcyIsImNsb3NlT3V0Y29tZSIsImZpbmQiLCJvdXRjb21lIiwib25PdXRjb21lIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25lcnJvciIsImFib3J0IiwiRE9NRXhjZXB0aW9uIiwib25sb2FkIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsImJhc2U2NCIsIkltYWdlIiwiYXNwZWN0UmF0aW8iLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInNjYWxlIiwiZHJhd0ltYWdlIiwicmVzaXplZCIsInRvRGF0YVVSTCIsInNyYyIsImNvbXBvbmVudENsYXNzIiwiaGVhZGVyQ2xhc3MiLCJ0cmFuc3BhcmVudCIsImNsYXNzZXMiLCJmaWxlUGljayIsImNsZWFyQnV0dG9uIiwiZmlsZUNvbnRlbnQiLCJpc1Zpc2libGUiLCJvbkNsaWNrIiwiZ2V0T2JqZWN0RGF0YVByb3BlcnR5IiwiaW5kZXhPZiIsIm1heEhlaWdodCIsIm1heFdpZHRoIiwiT09iamVjdEZpdCIsImVsZW1lbnQiLCJvbkxvYWQiLCJtYXJnaW4iLCJpbWdEaXYiLCJlbGUiLCJvbkNoYW5nZSIsInJlZ2lzdGVyIiwiRmlsZVBpY2tlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=