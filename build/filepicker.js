(()=>{var e={341:()=>{},877:()=>{},580:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.DragEvent=t.eDragEventType=t.modalDialogButton=t.DialogBox=void 0;var u=s(n(804));n(341);var d=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new h,n.dialogVisible=!1,n.dialogTitle="",n.dialogButtons=[],n.dialogOnClose=n.hideDialog,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.showDialog=n.showDialog.bind(n),n.hideDialog=n.hideDialog.bind(n),n}return o(t,e),t.prototype.setDialog=function(e){if(this.dialog=e,this.dialog){var t=this.dialog.offsetParent.clientWidth/2,n=this.dialog.offsetParent.clientHeight/2,i=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=t-i,this.top=n-o,this.dialog.classList.add("shown"),this.positionDialog()}},t.prototype.positionDialog=function(){this.dialog&&(this.dialog.style.left=this.left+"px",this.dialog.style.top=this.top+"px")},t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){this.forceUpdate()},t.prototype.showDialog=function(e,t,n,i){return l(this,void 0,void 0,(function(){return c(this,(function(o){return this.dialogVisible=!0,this.dialogTitle=e,this.dialogContent=t,this.dialogOnClose=i||this.hideDialog,this.dialogButtons=n,this.forceUpdate(),[2]}))}))},t.prototype.hideDialog=function(e){return l(this,void 0,void 0,(function(){return c(this,(function(e){return this.dialogVisible=!1,this.dialogTitle="",this.dialogContent=void 0,this.dialogOnClose=void 0,this.dialogButtons=[],this.forceUpdate(),[2]}))}))},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.hideDialog()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.hideDialog()},t.prototype.render=function(){var e,t=this;if(!1===this.dialogVisible)e=u.createElement("div",null);else{for(var n=[],i=function(e){n.push(u.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},o=0,a=this.dialogButtons;o<a.length;o++)i(a[o]);e=u.createElement("div",{className:"modal-redaction",onMouseMove:function(e){t.onMouseMove(e)},onMouseUp:function(e){t.onMouseUp(e)},onMouseDown:function(e){t.handleOutsideClick(e)},onContextMenu:function(e){e.preventDefault(),e.stopPropagation(),t.props.onContextMenu&&t.props.onContextMenu()}},u.createElement("div",{className:"modal-content",ref:function(e){t.setDialog(e)}},u.createElement("div",{className:"modal-dialog"},u.createElement("div",{className:"modal-dialog-header",onMouseDown:function(e){t.onMouseDown(e)}},u.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},u.createElement("span",{className:"modal-dialog-header-title"},this.dialogTitle)),u.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},u.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",title:"Close",onMouseDown:function(e){e.stopPropagation(),t.dialogOnClose()}}))),u.createElement("div",{className:"modal-dialog-body"},u.createElement("div",{className:"modal-dialog-body-client"},this.dialogContent)),u.createElement("div",{className:"modal-dialog-button-bar"},n))))}return e},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.positionDialog()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;this.dragEvent=h.start(p.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===p.dialog&&this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY)},t.prototype.onMouseUp=function(e){this.dragEvent.type===p.dialog&&this.dragEvent.end(null,e.clientX,e.clientY)},t}(u.Component);t.DialogBox=d;var p;t.modalDialogButton=function(e,t){this.label=e,this.handler=t},function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(p=t.eDragEventType||(t.eDragEventType={}));var h=function(){function e(){this.type=p.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,i,o){var a=new e;return a.type=t,a.sourceElement=n,a.targetElement=null,a.mouseX=i,a.mouseY=o,a.mouseOffsetX=i,a.mouseOffsetY=o,a},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=p.unknown},e}();t.DragEvent=h},351:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.initializedListeners={},manywho.eventManager.joinListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.history=[],manywho.eventManager.beforeSend=function(e,t){for(var n in e&&window.hasOwnProperty("culture")&&culture.length>0&&e.setRequestHeader("Culture",culture),manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.join=function(e,t){for(var n in manywho.eventManager.joinListeners)manywho.eventManager.joinListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.initialized=function(e,t){for(var n in manywho.eventManager.initializedListeners)manywho.eventManager.initializedListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addInitializedListener=function(e,t){manywho.eventManager.initializedListeners[t]=e},manywho.eventManager.removeInitializedListener=function(e){delete manywho.eventManager.initializedListeners[e]},manywho.eventManager.addJoinListener=function(e,t){manywho.eventManager.joinListeners[t]=e},manywho.eventManager.removeJoinListener=function(e){delete manywho.eventManager.joinListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail},initialization:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.initialized,fail:manywho.eventManager.fail},join:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.join,fail:manywho.eventManager.fail}}))},687:function(e,t,n){"use strict";var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t},l=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,i,o,a,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=2&a[0]?i.return:a[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,a[1])).done)return o;switch(i=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,i=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){r.label=a[1];break}if(6===a[0]&&r.label<o[1]){r.label=o[1],o=a;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(a);break}o[2]&&r.ops.pop(),r.trys.pop();continue}a=t.call(e,r)}catch(e){a=[6,e],i=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var u=s(n(804));n(877),n(351);var d=n(580),p=function(e){function t(t){var n=e.call(this,t)||this;return n.selectedItem=null,n.text="",n.lastContent=u.createElement("div",null),n.fileSelected=n.fileSelected.bind(n),n.fileReadAsDataURL=n.fileReadAsDataURL.bind(n),n.ResizeBase64Img=n.ResizeBase64Img.bind(n),n.clearFile=n.clearFile.bind(n),n.pickFile=n.pickFile.bind(n),n.isImage=n.isImage.bind(n),n.rescaleImage=n.rescaleImage.bind(n),n.flowMoved=n.flowMoved.bind(n),n.state={imgData:void 0,fileName:void 0},n}return o(t,e),t.prototype.flowMoved=function(e,t){return l(this,void 0,void 0,(function(){return c(this,(function(t){return"FORWARD"===e.invokeType||e.invokeType,[2]}))}))},t.prototype.componentDidMount=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.preserveState()];case 1:return e.sent(),this.forceUpdate(),[2]}}))}))},t.prototype.preserveState=function(){return l(this,void 0,void 0,(function(){var e,t;return c(this,(function(n){return e=manywho.model.getComponent(this.props.id,this.props.flowKey),t={},"ContentString"===e.contentType?t.contentValue=e.contentValue:t.objectData=e.objectData,manywho.state.setComponent(this.props.id,t,this.props.flowKey,!0),[2]}))}))},t.prototype.componentWillUnmount=function(){},t.prototype.rescaleImage=function(e){this.img.width>=this.img.height?(this.img.style.width="100%",this.img.style.height="auto"):(this.img.style.width="auto",this.img.style.height="100%")},t.prototype.componentWillReceiveProps=function(e){console.log("ping")},t.prototype.clearFile=function(){var e,t,n,i,o;return l(this,void 0,void 0,(function(){var a,r,s;return c(this,(function(l){return"ContentString"===(a=manywho.model.getComponent(this.props.id,this.props.flowKey)).contentType?manywho.state.setComponent(this.props.id,{contentValue:""},this.props.flowKey,!0):(r=manywho.state.getComponent(this.props.id,this.props.flowKey),s=void 0,(s=r.objectData&&r.objectData instanceof Array?r.objectData[0]:r.objectData)||(s=a.objectData&&a.objectData instanceof Array?a.objectData[0]:a.objectData),s&&(manywho.utils.setObjectDataProperty(s.properties,null===(e=a.attributes)||void 0===e?void 0:e.fileNameField,""),manywho.utils.setObjectDataProperty(s.properties,null===(t=a.attributes)||void 0===t?void 0:t.extensionField,""),manywho.utils.setObjectDataProperty(s.properties,null===(n=a.attributes)||void 0===n?void 0:n.mimeTypeField,""),manywho.utils.setObjectDataProperty(s.properties,null===(i=a.attributes)||void 0===i?void 0:i.sizeField,""),manywho.utils.setObjectDataProperty(s.properties,null===(o=a.attributes)||void 0===o?void 0:o.dataField,""),s.isSelected=!1),manywho.state.setComponent(this.props.id,{objectData:[s]},this.props.flowKey,!0)),manywho.component.handleEvent(this,a,this.props.flowKey),[2]}))}))},t.prototype.pickFile=function(){this.fileInput.value="",this.fileInput.click()},t.prototype.isImage=function(e){switch(e){case"image/jpg":case"image/jpeg":case"image/bmp":case"image/gif":case"image/giff":case"image/png":case"image/webp":return!0;default:return!1}},t.prototype.fileSelected=function(e){var t,n,i,o,a,r,s,p,h,f,m;return l(this,void 0,void 0,(function(){var e,l,v,g,y,b,w,D,M,j,O,x,E;return c(this,(function(c){switch(c.label){case 0:return this.fileInput.files&&this.fileInput.files.length>0?(e=manywho.model.getComponent(this.props.id,this.props.flowKey),l=this.fileInput.files[0],[4,this.fileReadAsDataURL(l)]):[3,8];case 1:return v=c.sent(),g=l.name.lastIndexOf(".")>=0?l.name.substring(0,l.name.lastIndexOf(".")):l.name,y=l.name.lastIndexOf(".")>=0?l.name.substring(l.name.lastIndexOf(".")+1).toLowerCase():"",b=l.type,w=l.size,(D=parseInt(e.attributes.maxSizeKB||0))>0&&w>1e3*D?(this.messageBox.showDialog("File Too Large",u.createElement("span",null,"The file you have chosen is ",w," bytes long and exceeds the maximum file size of ",D),[new d.modalDialogButton("Ok",this.messageBox.hideDialog)]),[3,8]):[3,2];case 2:return this.isImage(b)?(M=0,parseInt(e.attributes.imageSize||"0")>0&&(M=parseInt(e.attributes.imageSize)),M>0?[4,this.ResizeBase64Img(v,M)]:[3,4]):[3,4];case 3:v=c.sent(),c.label=4;case 4:return"ContentString"===e.contentType?manywho.state.setComponent(this.props.id,{contentValue:v},this.props.flowKey,!0):(j=manywho.state.getComponent(this.props.id,this.props.flowKey),O=void 0,(O=j.objectData&&j.objectData instanceof Array?j.objectData[0]:j.objectData)||(O=e.objectData&&e.objectData instanceof Array?e.objectData[0]:e.objectData),O&&(O.properties,(null===(t=e.attributes)||void 0===t?void 0:t.fileNameField)&&manywho.utils.setObjectDataProperty(O.properties,null===(n=e.attributes)||void 0===n?void 0:n.fileNameField,g),O.properties,(null===(i=e.attributes)||void 0===i?void 0:i.extensionField)&&manywho.utils.setObjectDataProperty(O.properties,null===(o=e.attributes)||void 0===o?void 0:o.extensionField,y),O.properties,(null===(a=e.attributes)||void 0===a?void 0:a.mimeTypeField)&&manywho.utils.setObjectDataProperty(O.properties,null===(r=e.attributes)||void 0===r?void 0:r.mimeTypeField,b),O.properties,(null===(s=e.attributes)||void 0===s?void 0:s.sizeField)&&manywho.utils.setObjectDataProperty(O.properties,null===(p=e.attributes)||void 0===p?void 0:p.sizeField,w),O.properties,(null===(h=e.attributes)||void 0===h?void 0:h.dataField)&&manywho.utils.setObjectDataProperty(O.properties,null===(f=e.attributes)||void 0===f?void 0:f.dataField,v)),manywho.state.setComponent(this.props.id,{objectData:[O]},this.props.flowKey,!0)),(null===(m=e.attributes)||void 0===m?void 0:m.onSelected)&&e.attributes.onSelected.length>0?(x=manywho.model.getOutcomes(this.props.id,this.props.flowKey),(E=x.find((function(t){return t.value===e.attributes.onSelected})))?[4,manywho.component.onOutcome(E,null,this.props.flowKey)]:[3,6]):[3,7];case 5:c.sent(),c.label=6;case 6:return[3,8];case 7:manywho.component.handleEvent(this,e,this.props.flowKey),c.label=8;case 8:return[2]}}))}))},t.prototype.fileReadAsDataURL=function(e){return l(this,void 0,void 0,(function(){var t;return c(this,(function(n){return t=new FileReader,[2,new Promise((function(n,i){t.onerror=function(){t.abort(),i(new DOMException("Problem reading file"))},t.onload=function(){n(t.result)},t.readAsDataURL(e)}))]}))}))},t.prototype.ResizeBase64Img=function(e,t){return l(this,void 0,void 0,(function(){var n;return c(this,(function(i){return n=new Image,[2,new Promise((function(i,o){n.onload=function(){var e=n.height/n.width,o=document.createElement("canvas");o.width=t,o.height=t*e;var a=o.getContext("2d");n.width,a.scale(o.width/n.width,o.height/n.height),a.drawImage(n,0,0);var r=o.toDataURL();i(r)},n.onerror=function(){o(new DOMException("Problem loading image file"))},n.src=e}))]}))}))},t.prototype.render=function(){var e,t,n,i,o,a,r,s=this,l=manywho.model.getComponent(this.props.id,this.props.flowKey),c=manywho.state.getComponent(this.props.id,this.props.flowKey),p="",h="",f=(null===(e=l.attributes)||void 0===e?void 0:e.title)||"Select File";"true"===(null===(n=null===(t=l.attributes)||void 0===t?void 0:t.transparent)||void 0===n?void 0:n.toLowerCase())?(p="file-picker-transparent "+(null===(i=l.attributes)||void 0===i?void 0:i.classes),h="file-picker-header-transparent ",f=""):(p="file-picker "+(null===(o=l.attributes)||void 0===o?void 0:o.classes),h="file-picker-header ");var m,v,g,y,b,w,D={width:"-webkit-fill-available",height:"-webkit-fill-available"};if(!1===l.isVisible&&(D.display="none"),l.width&&(D.width=l.width+"px"),l.height&&(D.height=l.height+"px"),m=this.pickFile,v=u.createElement("span",{className:"glyphicon glyphicon-remove file-picker-header-button",onClick:this.clearFile,title:"Clear selected file"}),"ContentString"===l.contentType)y=c.contentValue;else{var M=void 0;c&&c.objectData&&(M=c.objectData instanceof Array?c.objectData[0]:c.objectData),M||(M=l.objectData&&l.objectData instanceof Array?l.objectData[0]:l.objectData)&&manywho.state.setComponent(this.props.id,{objectData:[M]},this.props.flowKey,!0),M&&(b=null===(a=manywho.utils.getObjectDataProperty(M.properties,l.attributes.fileNameField))||void 0===a?void 0:a.contentValue,y=null===(r=manywho.utils.getObjectDataProperty(M.properties,l.attributes.dataField))||void 0===r?void 0:r.contentValue)}return y?(g=y.substring(y.indexOf(":")+1,y.indexOf(";")),w=this.isImage(g)?u.createElement("img",{style:{maxHeight:"100%",maxWidth:"100%",width:"auto",OObjectFit:"cover"},ref:function(e){s.img=e},className:"file-picker-image",src:y,onLoad:this.rescaleImage}):u.createElement("span",{className:"file-picker-file-name"},b)):w=u.createElement("div",{style:{display:"flex",flexDirection:"column",flexGrow:1}},u.createElement("div",{style:{margin:"auto",display:"flex",flexDirection:"column"}},u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"No file selected"),u.createElement("span",{className:"file-picker-file-name",style:{margin:"auto"}},"Click to select a file"))),this.lastContent=u.createElement("div",{className:p,style:D},u.createElement(d.DialogBox,{ref:function(e){s.messageBox=e}}),u.createElement("div",{className:h},u.createElement("div",{className:"file-picker-header-left"},u.createElement("span",{className:"file-picker-header-title"},f)),u.createElement("div",{className:"file-picker-header-right"},v)),u.createElement("div",{className:"file-picker-body",onClick:m,ref:function(e){s.imgDiv=e}},w,u.createElement("input",{ref:function(e){s.fileInput=e},type:"file",className:"file-file",onChange:this.fileSelected}))),this.lastContent},t}(u.Component);t.default=p,manywho.component.register("FilePicker",p)},629:function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(687),t)},804:e=>{"use strict";e.exports=React}},t={};!function n(i){var o=t[i];if(void 0!==o)return o.exports;var a=t[i]={exports:{}};return e[i].call(a.exports,a,a.exports,n),a.exports}(629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,